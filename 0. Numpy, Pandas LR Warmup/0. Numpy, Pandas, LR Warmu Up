{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d7723fb8",
   "metadata": {},
   "source": [
    "# DISTRIBUTED DATA LAB HOMEWORK 1\n",
    "## GÃ–KCE SUCU\n",
    "## 246112"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0062a8e1",
   "metadata": {},
   "source": [
    "# EXERCISE 1: PANDAS AND NUMPY"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b0e951b",
   "metadata": {},
   "source": [
    "## 1. MATRIX MULTIPLICATION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27bc5ee6",
   "metadata": {},
   "source": [
    "### 1.1 Importing the Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "72015c87",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a42c1de",
   "metadata": {},
   "source": [
    "### 1. 2 Creating Matrix A"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e852ef4",
   "metadata": {},
   "source": [
    "We will create a 100x20  numpy matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "24baf548",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.0821026 , 0.74634661, 0.97859313, ..., 0.09860611, 0.51232329,\n",
       "        0.29083906],\n",
       "       [0.18505694, 0.8736839 , 0.60330149, ..., 0.49291606, 0.32987756,\n",
       "        0.02146864],\n",
       "       [0.70690673, 0.33255134, 0.55808666, ..., 0.42091747, 0.40541084,\n",
       "        0.55687283],\n",
       "       ...,\n",
       "       [0.75847147, 0.484546  , 0.06083106, ..., 0.74622687, 0.12254705,\n",
       "        0.67961995],\n",
       "       [0.45627242, 0.22899592, 0.45620856, ..., 0.94381993, 0.31212269,\n",
       "        0.19697026],\n",
       "       [0.78508295, 0.64083237, 0.3121941 , ..., 0.32737928, 0.54889874,\n",
       "        0.43117356]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#A is random 100x2 dimension matrix \n",
    "A = np.random.rand(100,20)\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2f1f4c54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimension of Matrix A = (100, 20)\n"
     ]
    }
   ],
   "source": [
    "print(\"Dimension of Matrix A =\",A.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd1b8e5c",
   "metadata": {},
   "source": [
    "### 1.3 Creating Vector v"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a4bc57d",
   "metadata": {},
   "source": [
    "We will create a 20x1 vector with $\\mu =2$ and $\\sigma=0.01$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "004a6b85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.9961175 ],\n",
       "       [1.99827418],\n",
       "       [2.01598013],\n",
       "       [1.99390297],\n",
       "       [2.02256837],\n",
       "       [2.0184149 ],\n",
       "       [1.97804555],\n",
       "       [2.01359944],\n",
       "       [1.99512708],\n",
       "       [2.01399939],\n",
       "       [1.99934821],\n",
       "       [1.99254744],\n",
       "       [1.99875659],\n",
       "       [1.99604354],\n",
       "       [1.98773445],\n",
       "       [2.00533359],\n",
       "       [2.00744585],\n",
       "       [2.00027718],\n",
       "       [1.98902891],\n",
       "       [1.99164862]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#v has normal distribution mean=2 and sigma=0.01\n",
    "v = np.random.normal(2, 0.01, 20).reshape(20,1)\n",
    "v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "91ffc2a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimension of Vector v :\n",
      " (20, 1)\n"
     ]
    }
   ],
   "source": [
    "#checking the created matrix's dimension\n",
    "print('Dimension of Vector v :\\n',v.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "002a7226",
   "metadata": {},
   "source": [
    "### 1.4 Creating a Vector c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bf733c35",
   "metadata": {},
   "outputs": [],
   "source": [
    "number_of_rows = int(A.shape[0])\n",
    "number_of_columns = int(A.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fa78796f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating a loop for defined operation\n",
    "total=0\n",
    "iteration = 0\n",
    "c = np.zeros((2000,1))\n",
    "for i in range(0,number_of_rows):\n",
    "    for j in range(0,number_of_columns):\n",
    "        total=total+A[i][j]*v[j]\n",
    "        c[iteration]=total\n",
    "        iteration=iteration+1       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1d8b1c96-6200-449d-9b94-b1aa04f3656b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.63886429e-01],\n",
       "       [1.65529159e+00],\n",
       "       [3.62811588e+00],\n",
       "       ...,\n",
       "       [1.99044711e+03],\n",
       "       [1.99153888e+03],\n",
       "       [1.99239763e+03]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e87699ee-c3e4-44bc-b527-89fc2e892fa9",
   "metadata": {},
   "source": [
    "### 1.5 Mean of Vector c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2bbd690-2d57-420c-97c8-fe685edec36e",
   "metadata": {},
   "source": [
    "Mean  = $\\dfrac{1}{n}\\sum^n_{k=1}{x_k}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "558a5c15-973e-4401-8c75-a2d7ab8a2970",
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining a function for finding mean a vector\n",
    "def mean_a_vector(vector):\n",
    "    total = 0\n",
    "    row_a_vector=int(vector.shape[0])\n",
    "    for i in range(0,row_a_vector):\n",
    "        total=total + vector[i]\n",
    "    return  float(total/row_a_vector)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2aca0bc0-68b5-4483-90e5-41d00c6d4435",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of Vector c = 997.8642652110509\n"
     ]
    }
   ],
   "source": [
    "print(\"Mean of Vector c =\",mean_a_vector(c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c3490335-6a7c-4c3d-959c-a451d1b39a49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "997.8642652110501"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#controlling if the mean function is defined correctly\n",
    "np.mean(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1de6983-e8bf-47f4-a4c8-f7ab57c36986",
   "metadata": {},
   "source": [
    "### 1.6 Standard Deviation of Vector c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80e591ed-9979-4f67-8dce-79f0b9a7a87b",
   "metadata": {},
   "source": [
    "Standard Deviation  = $\\sqrt{(\\dfrac{1}{n}\\sum^n_{k=1}({x_k- \\mu})^2)}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0d491a73-b0c7-49b2-9004-dd1c1a73e1cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating standard deviation\n",
    "def standard_deviation(vector):\n",
    "    row_a_vector=int(vector.shape[0])\n",
    "    mean = mean_a_vector(vector)\n",
    "    total=0\n",
    "    for i in range(0,row_a_vector):\n",
    "        total = total + (vector[i]-mean)**2\n",
    "    return (float(total)/row_a_vector)**(1/2)       \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "82127c2e-409c-4d26-bed2-a62624f1a615",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Standard Deviation of Vector c = 575.0794871599344\n"
     ]
    }
   ],
   "source": [
    "print(\"Standard Deviation of Vector c =\",standard_deviation(c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "dd983564-0f66-4e07-b9f2-87ca3b24c1f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "575.0794871599345"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#controlling if the function gives correct std\n",
    "np.std(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c0c1c4d-7065-4590-818b-252a4f076262",
   "metadata": {},
   "source": [
    "### 1.6 Histogram of Vector c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2ebb3d0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Histogram of Vector c\")\n",
    "plt.hist(c,bins=5)\n",
    "plt.xlabel(\"Values\")\n",
    "plt.ylabel(\"Numbers\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbe8fa0d-4c64-4ba3-8b89-5c0b1ed0784d",
   "metadata": {},
   "source": [
    "## 2. GRADING PROGRAM"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e3e73d4-70ba-4dc9-974c-3d154af30c6e",
   "metadata": {},
   "source": [
    "### 2.1 Importing the Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "1b844f13-084e-4578-98b0-93e932031a57",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "862fa5b8-26fa-4011-aa00-0f2351894376",
   "metadata": {},
   "source": [
    "### 2.2 Reading the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7e24cd71-c218-406d-b9ba-94ee74ad8948",
   "metadata": {},
   "outputs": [],
   "source": [
    "#reading the data\n",
    "grades= pd.read_csv('Grades.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c09da202-377b-4f3f-9030-92533bd3a5db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>First Name</th>\n",
       "      <th>Last Name</th>\n",
       "      <th>English</th>\n",
       "      <th>Maths</th>\n",
       "      <th>Science</th>\n",
       "      <th>German</th>\n",
       "      <th>Sports</th>\n",
       "      <th>Final Grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Robyn</td>\n",
       "      <td>Hobgood</td>\n",
       "      <td>60.95</td>\n",
       "      <td>24.77</td>\n",
       "      <td>20.60</td>\n",
       "      <td>69.32</td>\n",
       "      <td>8.36</td>\n",
       "      <td>184.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Eddy</td>\n",
       "      <td>Swearngin</td>\n",
       "      <td>100.00</td>\n",
       "      <td>12.99</td>\n",
       "      <td>100.00</td>\n",
       "      <td>52.24</td>\n",
       "      <td>100.00</td>\n",
       "      <td>365.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Leoma</td>\n",
       "      <td>Bridgman</td>\n",
       "      <td>83.37</td>\n",
       "      <td>100.00</td>\n",
       "      <td>78.69</td>\n",
       "      <td>100.00</td>\n",
       "      <td>19.50</td>\n",
       "      <td>381.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arnetta</td>\n",
       "      <td>Peart</td>\n",
       "      <td>87.75</td>\n",
       "      <td>100.00</td>\n",
       "      <td>86.93</td>\n",
       "      <td>87.90</td>\n",
       "      <td>41.73</td>\n",
       "      <td>404.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>Colby</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>18.87</td>\n",
       "      <td>88.72</td>\n",
       "      <td>407.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Sherron</td>\n",
       "      <td>Sherron</td>\n",
       "      <td>92.06</td>\n",
       "      <td>55.91</td>\n",
       "      <td>93.93</td>\n",
       "      <td>-56.74</td>\n",
       "      <td>77.71</td>\n",
       "      <td>262.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Glendora</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>78.26</td>\n",
       "      <td>100.00</td>\n",
       "      <td>25.60</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>403.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Darlena</td>\n",
       "      <td>Gunn</td>\n",
       "      <td>100.00</td>\n",
       "      <td>64.53</td>\n",
       "      <td>100.00</td>\n",
       "      <td>23.21</td>\n",
       "      <td>79.01</td>\n",
       "      <td>366.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Aldo</td>\n",
       "      <td>Armas</td>\n",
       "      <td>100.00</td>\n",
       "      <td>83.49</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>92.32</td>\n",
       "      <td>475.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Tiny</td>\n",
       "      <td>Jack</td>\n",
       "      <td>94.35</td>\n",
       "      <td>33.09</td>\n",
       "      <td>82.57</td>\n",
       "      <td>31.13</td>\n",
       "      <td>100.00</td>\n",
       "      <td>341.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Elms</td>\n",
       "      <td>100.00</td>\n",
       "      <td>36.52</td>\n",
       "      <td>5.54</td>\n",
       "      <td>33.82</td>\n",
       "      <td>12.07</td>\n",
       "      <td>187.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lauretta</td>\n",
       "      <td>Herbert</td>\n",
       "      <td>50.73</td>\n",
       "      <td>-0.10</td>\n",
       "      <td>67.76</td>\n",
       "      <td>100.00</td>\n",
       "      <td>55.98</td>\n",
       "      <td>274.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Almeta</td>\n",
       "      <td>Dimond</td>\n",
       "      <td>80.37</td>\n",
       "      <td>100.00</td>\n",
       "      <td>69.02</td>\n",
       "      <td>100.00</td>\n",
       "      <td>79.62</td>\n",
       "      <td>429.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Phoebe</td>\n",
       "      <td>Schill</td>\n",
       "      <td>100.00</td>\n",
       "      <td>70.37</td>\n",
       "      <td>100.00</td>\n",
       "      <td>47.00</td>\n",
       "      <td>77.37</td>\n",
       "      <td>394.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Krystyna</td>\n",
       "      <td>Paris</td>\n",
       "      <td>18.75</td>\n",
       "      <td>73.80</td>\n",
       "      <td>87.00</td>\n",
       "      <td>59.30</td>\n",
       "      <td>100.00</td>\n",
       "      <td>338.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Miyoko</td>\n",
       "      <td>Laffoon</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>34.98</td>\n",
       "      <td>94.55</td>\n",
       "      <td>429.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rebecca</td>\n",
       "      <td>Duck</td>\n",
       "      <td>70.79</td>\n",
       "      <td>97.81</td>\n",
       "      <td>52.25</td>\n",
       "      <td>19.76</td>\n",
       "      <td>-13.93</td>\n",
       "      <td>226.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Elwanda</td>\n",
       "      <td>Hyland</td>\n",
       "      <td>45.69</td>\n",
       "      <td>74.86</td>\n",
       "      <td>43.10</td>\n",
       "      <td>45.00</td>\n",
       "      <td>76.72</td>\n",
       "      <td>285.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Gretchen</td>\n",
       "      <td>Kerrick</td>\n",
       "      <td>68.70</td>\n",
       "      <td>75.87</td>\n",
       "      <td>-14.87</td>\n",
       "      <td>57.32</td>\n",
       "      <td>84.28</td>\n",
       "      <td>271.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Winnifred</td>\n",
       "      <td>Colonna</td>\n",
       "      <td>83.79</td>\n",
       "      <td>100.00</td>\n",
       "      <td>85.66</td>\n",
       "      <td>3.94</td>\n",
       "      <td>100.00</td>\n",
       "      <td>373.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Gidget</td>\n",
       "      <td>Casseus</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>99.52</td>\n",
       "      <td>62.59</td>\n",
       "      <td>462.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Elaina</td>\n",
       "      <td>Mcdougal</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>80.29</td>\n",
       "      <td>100.00</td>\n",
       "      <td>-36.81</td>\n",
       "      <td>343.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Shoshana</td>\n",
       "      <td>Goldberger</td>\n",
       "      <td>55.10</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>455.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Nelson</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>40.44</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>440.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Lyle</td>\n",
       "      <td>Millsaps</td>\n",
       "      <td>100.00</td>\n",
       "      <td>71.88</td>\n",
       "      <td>100.00</td>\n",
       "      <td>-17.33</td>\n",
       "      <td>100.00</td>\n",
       "      <td>354.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Janay</td>\n",
       "      <td>Julius</td>\n",
       "      <td>41.70</td>\n",
       "      <td>100.00</td>\n",
       "      <td>55.90</td>\n",
       "      <td>75.53</td>\n",
       "      <td>100.00</td>\n",
       "      <td>373.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Devorah</td>\n",
       "      <td>Heyden</td>\n",
       "      <td>0.84</td>\n",
       "      <td>18.61</td>\n",
       "      <td>50.14</td>\n",
       "      <td>83.58</td>\n",
       "      <td>65.68</td>\n",
       "      <td>218.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Thelma</td>\n",
       "      <td>Romberger</td>\n",
       "      <td>72.41</td>\n",
       "      <td>61.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>76.38</td>\n",
       "      <td>51.37</td>\n",
       "      <td>361.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Armanda</td>\n",
       "      <td>Hendley</td>\n",
       "      <td>35.40</td>\n",
       "      <td>66.92</td>\n",
       "      <td>69.67</td>\n",
       "      <td>71.08</td>\n",
       "      <td>-2.34</td>\n",
       "      <td>240.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Raymon</td>\n",
       "      <td>Myerson</td>\n",
       "      <td>49.83</td>\n",
       "      <td>27.36</td>\n",
       "      <td>61.90</td>\n",
       "      <td>72.97</td>\n",
       "      <td>13.11</td>\n",
       "      <td>225.17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   First Name    Last Name  English   Maths  Science  German  Sports  \\\n",
       "0       Robyn      Hobgood    60.95   24.77    20.60   69.32    8.36   \n",
       "1        Eddy    Swearngin   100.00   12.99   100.00   52.24  100.00   \n",
       "2       Leoma     Bridgman    83.37  100.00    78.69  100.00   19.50   \n",
       "3     Arnetta        Peart    87.75  100.00    86.93   87.90   41.73   \n",
       "4    Maryland        Colby   100.00  100.00   100.00   18.87   88.72   \n",
       "5     Sherron      Sherron    92.06   55.91    93.93  -56.74   77.71   \n",
       "6    Glendora  Christopher    78.26  100.00    25.60  100.00  100.00   \n",
       "7     Darlena         Gunn   100.00   64.53   100.00   23.21   79.01   \n",
       "8        Aldo        Armas   100.00   83.49   100.00  100.00   92.32   \n",
       "9        Tiny         Jack    94.35   33.09    82.57   31.13  100.00   \n",
       "10    Carlton         Elms   100.00   36.52     5.54   33.82   12.07   \n",
       "11   Lauretta      Herbert    50.73   -0.10    67.76  100.00   55.98   \n",
       "12     Almeta       Dimond    80.37  100.00    69.02  100.00   79.62   \n",
       "13     Phoebe       Schill   100.00   70.37   100.00   47.00   77.37   \n",
       "14   Krystyna        Paris    18.75   73.80    87.00   59.30  100.00   \n",
       "15     Miyoko      Laffoon   100.00  100.00   100.00   34.98   94.55   \n",
       "16    Rebecca         Duck    70.79   97.81    52.25   19.76  -13.93   \n",
       "17    Elwanda       Hyland    45.69   74.86    43.10   45.00   76.72   \n",
       "18   Gretchen      Kerrick    68.70   75.87   -14.87   57.32   84.28   \n",
       "19  Winnifred      Colonna    83.79  100.00    85.66    3.94  100.00   \n",
       "20     Gidget      Casseus   100.00  100.00   100.00   99.52   62.59   \n",
       "21     Elaina     Mcdougal   100.00  100.00    80.29  100.00  -36.81   \n",
       "22   Shoshana   Goldberger    55.10  100.00   100.00  100.00  100.00   \n",
       "23  Argentina       Nelson   100.00  100.00    40.44  100.00  100.00   \n",
       "24       Lyle     Millsaps   100.00   71.88   100.00  -17.33  100.00   \n",
       "25      Janay       Julius    41.70  100.00    55.90   75.53  100.00   \n",
       "26    Devorah       Heyden     0.84   18.61    50.14   83.58   65.68   \n",
       "27     Thelma    Romberger    72.41   61.00   100.00   76.38   51.37   \n",
       "28    Armanda      Hendley    35.40   66.92    69.67   71.08   -2.34   \n",
       "29     Raymon      Myerson    49.83   27.36    61.90   72.97   13.11   \n",
       "\n",
       "    Final Grade  \n",
       "0        184.00  \n",
       "1        365.23  \n",
       "2        381.56  \n",
       "3        404.31  \n",
       "4        407.59  \n",
       "5        262.87  \n",
       "6        403.86  \n",
       "7        366.75  \n",
       "8        475.81  \n",
       "9        341.14  \n",
       "10       187.95  \n",
       "11       274.37  \n",
       "12       429.01  \n",
       "13       394.74  \n",
       "14       338.85  \n",
       "15       429.53  \n",
       "16       226.68  \n",
       "17       285.37  \n",
       "18       271.30  \n",
       "19       373.39  \n",
       "20       462.11  \n",
       "21       343.48  \n",
       "22       455.10  \n",
       "23       440.44  \n",
       "24       354.55  \n",
       "25       373.13  \n",
       "26       218.85  \n",
       "27       361.16  \n",
       "28       240.73  \n",
       "29       225.17  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#displayind data by using pandas\n",
    "grades"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c063bc6-7ec5-4bb3-a01b-770a9b64c450",
   "metadata": {},
   "source": [
    "### 2.3 Sum For All Subjects For Each Student"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "2dae25b7-abac-4ddf-8de6-9074987c8f83",
   "metadata": {},
   "outputs": [],
   "source": [
    "#loop for calculating sum of all grades of each student\n",
    "number_of_total_students = int(grades.shape[0])\n",
    "grades_total_each_student=[]\n",
    "\n",
    "for i in range(0,number_of_total_students):\n",
    "    total_grade = sum(grades.values[i][2:-1])\n",
    "    grades_total_each_student.append(total_grade)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "4c2c0758-ebdb-483e-a8ee-ca81ec5e7d39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>First Name</th>\n",
       "      <th>Last Name</th>\n",
       "      <th>Sum of All Grades</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Robyn</td>\n",
       "      <td>Hobgood</td>\n",
       "      <td>184.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Eddy</td>\n",
       "      <td>Swearngin</td>\n",
       "      <td>365.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Leoma</td>\n",
       "      <td>Bridgman</td>\n",
       "      <td>381.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arnetta</td>\n",
       "      <td>Peart</td>\n",
       "      <td>404.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>Colby</td>\n",
       "      <td>407.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Sherron</td>\n",
       "      <td>Sherron</td>\n",
       "      <td>262.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Glendora</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>403.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Darlena</td>\n",
       "      <td>Gunn</td>\n",
       "      <td>366.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Aldo</td>\n",
       "      <td>Armas</td>\n",
       "      <td>475.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Tiny</td>\n",
       "      <td>Jack</td>\n",
       "      <td>341.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Elms</td>\n",
       "      <td>187.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lauretta</td>\n",
       "      <td>Herbert</td>\n",
       "      <td>274.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Almeta</td>\n",
       "      <td>Dimond</td>\n",
       "      <td>429.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Phoebe</td>\n",
       "      <td>Schill</td>\n",
       "      <td>394.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Krystyna</td>\n",
       "      <td>Paris</td>\n",
       "      <td>338.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Miyoko</td>\n",
       "      <td>Laffoon</td>\n",
       "      <td>429.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rebecca</td>\n",
       "      <td>Duck</td>\n",
       "      <td>226.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Elwanda</td>\n",
       "      <td>Hyland</td>\n",
       "      <td>285.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Gretchen</td>\n",
       "      <td>Kerrick</td>\n",
       "      <td>271.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Winnifred</td>\n",
       "      <td>Colonna</td>\n",
       "      <td>373.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Gidget</td>\n",
       "      <td>Casseus</td>\n",
       "      <td>462.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Elaina</td>\n",
       "      <td>Mcdougal</td>\n",
       "      <td>343.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Shoshana</td>\n",
       "      <td>Goldberger</td>\n",
       "      <td>455.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Nelson</td>\n",
       "      <td>440.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Lyle</td>\n",
       "      <td>Millsaps</td>\n",
       "      <td>354.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Janay</td>\n",
       "      <td>Julius</td>\n",
       "      <td>373.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Devorah</td>\n",
       "      <td>Heyden</td>\n",
       "      <td>218.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Thelma</td>\n",
       "      <td>Romberger</td>\n",
       "      <td>361.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Armanda</td>\n",
       "      <td>Hendley</td>\n",
       "      <td>240.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Raymon</td>\n",
       "      <td>Myerson</td>\n",
       "      <td>225.17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   First Name    Last Name  Sum of All Grades\n",
       "0       Robyn      Hobgood             184.00\n",
       "1        Eddy    Swearngin             365.23\n",
       "2       Leoma     Bridgman             381.56\n",
       "3     Arnetta        Peart             404.31\n",
       "4    Maryland        Colby             407.59\n",
       "5     Sherron      Sherron             262.87\n",
       "6    Glendora  Christopher             403.86\n",
       "7     Darlena         Gunn             366.75\n",
       "8        Aldo        Armas             475.81\n",
       "9        Tiny         Jack             341.14\n",
       "10    Carlton         Elms             187.95\n",
       "11   Lauretta      Herbert             274.37\n",
       "12     Almeta       Dimond             429.01\n",
       "13     Phoebe       Schill             394.74\n",
       "14   Krystyna        Paris             338.85\n",
       "15     Miyoko      Laffoon             429.53\n",
       "16    Rebecca         Duck             226.68\n",
       "17    Elwanda       Hyland             285.37\n",
       "18   Gretchen      Kerrick             271.30\n",
       "19  Winnifred      Colonna             373.39\n",
       "20     Gidget      Casseus             462.11\n",
       "21     Elaina     Mcdougal             343.48\n",
       "22   Shoshana   Goldberger             455.10\n",
       "23  Argentina       Nelson             440.44\n",
       "24       Lyle     Millsaps             354.55\n",
       "25      Janay       Julius             373.13\n",
       "26    Devorah       Heyden             218.85\n",
       "27     Thelma    Romberger             361.16\n",
       "28    Armanda      Hendley             240.73\n",
       "29     Raymon      Myerson             225.17"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creating a table which shows total grade of each student\n",
    "data_frame = {\"First Name\":grades[\"First Name\"], \"Last Name\":grades[\"Last Name\"], \"Sum of All Grades\":grades_total_each_student}\n",
    "\n",
    "#displaying the table which shows sum of all grades of each student\n",
    "pd.DataFrame(data_frame)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac0b8fe0-2a4b-42a0-af13-406a8a6799c8",
   "metadata": {},
   "source": [
    "### 2.4 Average of the Point For Each Student"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "3b950ea9-e1b6-47c9-9115-73005942dbc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#loop for calculating average pointof all grades of each student\n",
    "number_of_total_students = int(grades.shape[0])\n",
    "average_point_for_each_student=[]\n",
    "\n",
    "for i in range(0,number_of_total_students):\n",
    "    total_grade = sum(grades.values[i][2:-1])/500\n",
    "    average_point_for_each_student.append(total_grade)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "22c18680-7919-4ffe-8b8c-9561bdf27b17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>First Name</th>\n",
       "      <th>Last Name</th>\n",
       "      <th>Average Point</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Robyn</td>\n",
       "      <td>Hobgood</td>\n",
       "      <td>0.36800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Eddy</td>\n",
       "      <td>Swearngin</td>\n",
       "      <td>0.73046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Leoma</td>\n",
       "      <td>Bridgman</td>\n",
       "      <td>0.76312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arnetta</td>\n",
       "      <td>Peart</td>\n",
       "      <td>0.80862</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>Colby</td>\n",
       "      <td>0.81518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Sherron</td>\n",
       "      <td>Sherron</td>\n",
       "      <td>0.52574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Glendora</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>0.80772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Darlena</td>\n",
       "      <td>Gunn</td>\n",
       "      <td>0.73350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Aldo</td>\n",
       "      <td>Armas</td>\n",
       "      <td>0.95162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Tiny</td>\n",
       "      <td>Jack</td>\n",
       "      <td>0.68228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Elms</td>\n",
       "      <td>0.37590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lauretta</td>\n",
       "      <td>Herbert</td>\n",
       "      <td>0.54874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Almeta</td>\n",
       "      <td>Dimond</td>\n",
       "      <td>0.85802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Phoebe</td>\n",
       "      <td>Schill</td>\n",
       "      <td>0.78948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Krystyna</td>\n",
       "      <td>Paris</td>\n",
       "      <td>0.67770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Miyoko</td>\n",
       "      <td>Laffoon</td>\n",
       "      <td>0.85906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rebecca</td>\n",
       "      <td>Duck</td>\n",
       "      <td>0.45336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Elwanda</td>\n",
       "      <td>Hyland</td>\n",
       "      <td>0.57074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Gretchen</td>\n",
       "      <td>Kerrick</td>\n",
       "      <td>0.54260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Winnifred</td>\n",
       "      <td>Colonna</td>\n",
       "      <td>0.74678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Gidget</td>\n",
       "      <td>Casseus</td>\n",
       "      <td>0.92422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Elaina</td>\n",
       "      <td>Mcdougal</td>\n",
       "      <td>0.68696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Shoshana</td>\n",
       "      <td>Goldberger</td>\n",
       "      <td>0.91020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Nelson</td>\n",
       "      <td>0.88088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Lyle</td>\n",
       "      <td>Millsaps</td>\n",
       "      <td>0.70910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Janay</td>\n",
       "      <td>Julius</td>\n",
       "      <td>0.74626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Devorah</td>\n",
       "      <td>Heyden</td>\n",
       "      <td>0.43770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Thelma</td>\n",
       "      <td>Romberger</td>\n",
       "      <td>0.72232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Armanda</td>\n",
       "      <td>Hendley</td>\n",
       "      <td>0.48146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Raymon</td>\n",
       "      <td>Myerson</td>\n",
       "      <td>0.45034</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   First Name    Last Name  Average Point\n",
       "0       Robyn      Hobgood        0.36800\n",
       "1        Eddy    Swearngin        0.73046\n",
       "2       Leoma     Bridgman        0.76312\n",
       "3     Arnetta        Peart        0.80862\n",
       "4    Maryland        Colby        0.81518\n",
       "5     Sherron      Sherron        0.52574\n",
       "6    Glendora  Christopher        0.80772\n",
       "7     Darlena         Gunn        0.73350\n",
       "8        Aldo        Armas        0.95162\n",
       "9        Tiny         Jack        0.68228\n",
       "10    Carlton         Elms        0.37590\n",
       "11   Lauretta      Herbert        0.54874\n",
       "12     Almeta       Dimond        0.85802\n",
       "13     Phoebe       Schill        0.78948\n",
       "14   Krystyna        Paris        0.67770\n",
       "15     Miyoko      Laffoon        0.85906\n",
       "16    Rebecca         Duck        0.45336\n",
       "17    Elwanda       Hyland        0.57074\n",
       "18   Gretchen      Kerrick        0.54260\n",
       "19  Winnifred      Colonna        0.74678\n",
       "20     Gidget      Casseus        0.92422\n",
       "21     Elaina     Mcdougal        0.68696\n",
       "22   Shoshana   Goldberger        0.91020\n",
       "23  Argentina       Nelson        0.88088\n",
       "24       Lyle     Millsaps        0.70910\n",
       "25      Janay       Julius        0.74626\n",
       "26    Devorah       Heyden        0.43770\n",
       "27     Thelma    Romberger        0.72232\n",
       "28    Armanda      Hendley        0.48146\n",
       "29     Raymon      Myerson        0.45034"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creating a table which shows average pointof each student\n",
    "data_frame_average = {\"First Name\":grades[\"First Name\"], \"Last Name\":grades[\"Last Name\"], \"Average Point\":average_point_for_each_student}\n",
    "\n",
    "#displaying the table which shows average points of each student\n",
    "pd.DataFrame(data_frame_average)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3b1b0b0-4525-4047-8323-c122379aa422",
   "metadata": {},
   "source": [
    "### 2.5 Standard Deviation of Point For Each Student"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "a36b6882-a80f-4b81-aca5-c55dafea458d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#loop for calculating std of all grades of each student\n",
    "number_of_total_students = int(grades.shape[0])\n",
    "std_for_each_student=[]\n",
    "\n",
    "for i in range(0,number_of_total_students):\n",
    "    std = standard_deviation(grades.values[i][2:-1])\n",
    "    std_for_each_student.append(std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "bc42828b-9037-4576-8717-1a9387c85809",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>First Name</th>\n",
       "      <th>Last Name</th>\n",
       "      <th>Standard Deviation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Robyn</td>\n",
       "      <td>Hobgood</td>\n",
       "      <td>23.903001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Eddy</td>\n",
       "      <td>Swearngin</td>\n",
       "      <td>35.268023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Leoma</td>\n",
       "      <td>Bridgman</td>\n",
       "      <td>29.682710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arnetta</td>\n",
       "      <td>Peart</td>\n",
       "      <td>20.156265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>Colby</td>\n",
       "      <td>31.627183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Sherron</td>\n",
       "      <td>Sherron</td>\n",
       "      <td>56.323993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Glendora</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>28.842357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Darlena</td>\n",
       "      <td>Gunn</td>\n",
       "      <td>28.440438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Aldo</td>\n",
       "      <td>Armas</td>\n",
       "      <td>6.550287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Tiny</td>\n",
       "      <td>Jack</td>\n",
       "      <td>30.028162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Elms</td>\n",
       "      <td>33.433034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lauretta</td>\n",
       "      <td>Herbert</td>\n",
       "      <td>32.381913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Almeta</td>\n",
       "      <td>Dimond</td>\n",
       "      <td>12.268053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Phoebe</td>\n",
       "      <td>Schill</td>\n",
       "      <td>19.915423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Krystyna</td>\n",
       "      <td>Paris</td>\n",
       "      <td>27.998671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Miyoko</td>\n",
       "      <td>Laffoon</td>\n",
       "      <td>25.550337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rebecca</td>\n",
       "      <td>Duck</td>\n",
       "      <td>39.027736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Elwanda</td>\n",
       "      <td>Hyland</td>\n",
       "      <td>15.316375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Gretchen</td>\n",
       "      <td>Kerrick</td>\n",
       "      <td>35.679200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Winnifred</td>\n",
       "      <td>Colonna</td>\n",
       "      <td>36.027503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Gidget</td>\n",
       "      <td>Casseus</td>\n",
       "      <td>14.917158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Elaina</td>\n",
       "      <td>Mcdougal</td>\n",
       "      <td>53.302454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Shoshana</td>\n",
       "      <td>Goldberger</td>\n",
       "      <td>17.960000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Nelson</td>\n",
       "      <td>23.824000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Lyle</td>\n",
       "      <td>Millsaps</td>\n",
       "      <td>45.444302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Janay</td>\n",
       "      <td>Julius</td>\n",
       "      <td>23.337873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Devorah</td>\n",
       "      <td>Heyden</td>\n",
       "      <td>30.270354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Thelma</td>\n",
       "      <td>Romberger</td>\n",
       "      <td>16.429731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Armanda</td>\n",
       "      <td>Hendley</td>\n",
       "      <td>28.471076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Raymon</td>\n",
       "      <td>Myerson</td>\n",
       "      <td>21.997253</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   First Name    Last Name  Standard Deviation\n",
       "0       Robyn      Hobgood           23.903001\n",
       "1        Eddy    Swearngin           35.268023\n",
       "2       Leoma     Bridgman           29.682710\n",
       "3     Arnetta        Peart           20.156265\n",
       "4    Maryland        Colby           31.627183\n",
       "5     Sherron      Sherron           56.323993\n",
       "6    Glendora  Christopher           28.842357\n",
       "7     Darlena         Gunn           28.440438\n",
       "8        Aldo        Armas            6.550287\n",
       "9        Tiny         Jack           30.028162\n",
       "10    Carlton         Elms           33.433034\n",
       "11   Lauretta      Herbert           32.381913\n",
       "12     Almeta       Dimond           12.268053\n",
       "13     Phoebe       Schill           19.915423\n",
       "14   Krystyna        Paris           27.998671\n",
       "15     Miyoko      Laffoon           25.550337\n",
       "16    Rebecca         Duck           39.027736\n",
       "17    Elwanda       Hyland           15.316375\n",
       "18   Gretchen      Kerrick           35.679200\n",
       "19  Winnifred      Colonna           36.027503\n",
       "20     Gidget      Casseus           14.917158\n",
       "21     Elaina     Mcdougal           53.302454\n",
       "22   Shoshana   Goldberger           17.960000\n",
       "23  Argentina       Nelson           23.824000\n",
       "24       Lyle     Millsaps           45.444302\n",
       "25      Janay       Julius           23.337873\n",
       "26    Devorah       Heyden           30.270354\n",
       "27     Thelma    Romberger           16.429731\n",
       "28    Armanda      Hendley           28.471076\n",
       "29     Raymon      Myerson           21.997253"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creating a table which shows std of each student\n",
    "data_frame_std = {\"First Name\":grades[\"First Name\"], \"Last Name\":grades[\"Last Name\"], \"Standard Deviation\":std_for_each_student}\n",
    "\n",
    "#displaying the table which shows stdof each student\n",
    "pd.DataFrame(data_frame_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b6484e3-5228-4dc2-a0e1-4f36bd1303b1",
   "metadata": {},
   "source": [
    "### 2.6 Average Points For All Students"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "95158af8-fb8f-4eae-beab-c1f13f6a3cd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "average_points_all_student = sum(grades_total_each_student)/int(grades.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "7f9cd7ce-73f9-4945-81ba-16af86f891b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Points All Student = 342.6343333333333\n"
     ]
    }
   ],
   "source": [
    "print(\"Average Points All Student =\",average_points_all_student)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "52c0617c-4990-4bc3-bb93-18365d450471",
   "metadata": {},
   "outputs": [],
   "source": [
    "l = []\n",
    "for i in range(0,29):\n",
    "    l.append(342.6343333333333)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "c589c873-9923-4c19-81b4-e8d90916fd62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,6))\n",
    "plt.title(\"Average Grade\")\n",
    "plt.plot(grades_total_each_student,label=\"Total Grades of Each Student\")\n",
    "plt.plot(l, label=\"Average Grade =342.63\")\n",
    "plt.xlabel(\"Student ID\")\n",
    "plt.ylabel(\"Sum of Grades of Each Student\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60ae06b3-ffca-430b-8817-4bb1e39b89de",
   "metadata": {},
   "source": [
    "### 2.7 Assigning the Grades For Each Subject"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "da812804-d9d2-44ab-bd00-974a8e1d44f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining a function for grading system\n",
    "def grading(G):\n",
    "    letter=\"0\"\n",
    "    if 96<=G<=100:\n",
    "        letter =\"A+\"\n",
    "    elif 90<=G<96:\n",
    "        letter =\"A\"\n",
    "    elif 86<=G<90:\n",
    "        letter =\"A-\"\n",
    "    elif 80<=G<86:\n",
    "        letter =\"B+\"\n",
    "    elif 76<=G<80:\n",
    "        letter =\"B\"\n",
    "    elif 70<=G<76:\n",
    "        letter =\"B-\"\n",
    "    elif 66<=G<70:\n",
    "        letter =\"C+\"\n",
    "    elif 60<=G<66:\n",
    "        letter =\"C\"\n",
    "    elif 56<=G<60:\n",
    "        letter =\"D\"\n",
    "    elif 0<=G<56:\n",
    "        letter=\"F\"\n",
    "\n",
    "    return letter   \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "8baeb803-894a-45db-89a0-59ca68035fa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "grading_scores= []\n",
    "for i in grades.values:\n",
    "    for G in i[2:-1]:\n",
    "        grading_scores.append(grading(G))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "68c510da-d676-4042-bd9f-aa478a388626",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>First Name</th>\n",
       "      <th>Last Name</th>\n",
       "      <th>English</th>\n",
       "      <th>Maths</th>\n",
       "      <th>Science</th>\n",
       "      <th>German</th>\n",
       "      <th>Sports</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Robyn</td>\n",
       "      <td>Hobgood</td>\n",
       "      <td>C</td>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "      <td>C+</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Eddy</td>\n",
       "      <td>Swearngin</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>A+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Leoma</td>\n",
       "      <td>Bridgman</td>\n",
       "      <td>B+</td>\n",
       "      <td>A+</td>\n",
       "      <td>B</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arnetta</td>\n",
       "      <td>Peart</td>\n",
       "      <td>A-</td>\n",
       "      <td>A+</td>\n",
       "      <td>A-</td>\n",
       "      <td>A-</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>Colby</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>A-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Sherron</td>\n",
       "      <td>Sherron</td>\n",
       "      <td>A</td>\n",
       "      <td>F</td>\n",
       "      <td>A</td>\n",
       "      <td>0</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Glendora</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>B</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Darlena</td>\n",
       "      <td>Gunn</td>\n",
       "      <td>A+</td>\n",
       "      <td>C</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Aldo</td>\n",
       "      <td>Armas</td>\n",
       "      <td>A+</td>\n",
       "      <td>B+</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Tiny</td>\n",
       "      <td>Jack</td>\n",
       "      <td>A</td>\n",
       "      <td>F</td>\n",
       "      <td>B+</td>\n",
       "      <td>F</td>\n",
       "      <td>A+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Elms</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lauretta</td>\n",
       "      <td>Herbert</td>\n",
       "      <td>F</td>\n",
       "      <td>0</td>\n",
       "      <td>C+</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Almeta</td>\n",
       "      <td>Dimond</td>\n",
       "      <td>B+</td>\n",
       "      <td>A+</td>\n",
       "      <td>C+</td>\n",
       "      <td>A+</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Phoebe</td>\n",
       "      <td>Schill</td>\n",
       "      <td>A+</td>\n",
       "      <td>B-</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Krystyna</td>\n",
       "      <td>Paris</td>\n",
       "      <td>F</td>\n",
       "      <td>B-</td>\n",
       "      <td>A-</td>\n",
       "      <td>D</td>\n",
       "      <td>A+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Miyoko</td>\n",
       "      <td>Laffoon</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rebecca</td>\n",
       "      <td>Duck</td>\n",
       "      <td>B-</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Elwanda</td>\n",
       "      <td>Hyland</td>\n",
       "      <td>F</td>\n",
       "      <td>B-</td>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Gretchen</td>\n",
       "      <td>Kerrick</td>\n",
       "      <td>C+</td>\n",
       "      <td>B-</td>\n",
       "      <td>0</td>\n",
       "      <td>D</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Winnifred</td>\n",
       "      <td>Colonna</td>\n",
       "      <td>B+</td>\n",
       "      <td>A+</td>\n",
       "      <td>B+</td>\n",
       "      <td>F</td>\n",
       "      <td>A+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Gidget</td>\n",
       "      <td>Casseus</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Elaina</td>\n",
       "      <td>Mcdougal</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>B+</td>\n",
       "      <td>A+</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Shoshana</td>\n",
       "      <td>Goldberger</td>\n",
       "      <td>F</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Nelson</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>A+</td>\n",
       "      <td>A+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Lyle</td>\n",
       "      <td>Millsaps</td>\n",
       "      <td>A+</td>\n",
       "      <td>B-</td>\n",
       "      <td>A+</td>\n",
       "      <td>0</td>\n",
       "      <td>A+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Janay</td>\n",
       "      <td>Julius</td>\n",
       "      <td>F</td>\n",
       "      <td>A+</td>\n",
       "      <td>F</td>\n",
       "      <td>B-</td>\n",
       "      <td>A+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Devorah</td>\n",
       "      <td>Heyden</td>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "      <td>B+</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Thelma</td>\n",
       "      <td>Romberger</td>\n",
       "      <td>B-</td>\n",
       "      <td>C</td>\n",
       "      <td>A+</td>\n",
       "      <td>B</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Armanda</td>\n",
       "      <td>Hendley</td>\n",
       "      <td>F</td>\n",
       "      <td>C+</td>\n",
       "      <td>C+</td>\n",
       "      <td>B-</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Raymon</td>\n",
       "      <td>Myerson</td>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "      <td>C</td>\n",
       "      <td>B-</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   First Name    Last Name English Maths Science German Sports\n",
       "0       Robyn      Hobgood       C     F       F     C+      F\n",
       "1        Eddy    Swearngin      A+     F      A+      F     A+\n",
       "2       Leoma     Bridgman      B+    A+       B     A+      F\n",
       "3     Arnetta        Peart      A-    A+      A-     A-      F\n",
       "4    Maryland        Colby      A+    A+      A+      F     A-\n",
       "5     Sherron      Sherron       A     F       A      0      B\n",
       "6    Glendora  Christopher       B    A+       F     A+     A+\n",
       "7     Darlena         Gunn      A+     C      A+      F      B\n",
       "8        Aldo        Armas      A+    B+      A+     A+      A\n",
       "9        Tiny         Jack       A     F      B+      F     A+\n",
       "10    Carlton         Elms      A+     F       F      F      F\n",
       "11   Lauretta      Herbert       F     0      C+     A+      F\n",
       "12     Almeta       Dimond      B+    A+      C+     A+      B\n",
       "13     Phoebe       Schill      A+    B-      A+      F      B\n",
       "14   Krystyna        Paris       F    B-      A-      D     A+\n",
       "15     Miyoko      Laffoon      A+    A+      A+      F      A\n",
       "16    Rebecca         Duck      B-    A+       F      F      0\n",
       "17    Elwanda       Hyland       F    B-       F      F      B\n",
       "18   Gretchen      Kerrick      C+    B-       0      D     B+\n",
       "19  Winnifred      Colonna      B+    A+      B+      F     A+\n",
       "20     Gidget      Casseus      A+    A+      A+     A+      C\n",
       "21     Elaina     Mcdougal      A+    A+      B+     A+      0\n",
       "22   Shoshana   Goldberger       F    A+      A+     A+     A+\n",
       "23  Argentina       Nelson      A+    A+       F     A+     A+\n",
       "24       Lyle     Millsaps      A+    B-      A+      0     A+\n",
       "25      Janay       Julius       F    A+       F     B-     A+\n",
       "26    Devorah       Heyden       F     F       F     B+      C\n",
       "27     Thelma    Romberger      B-     C      A+      B      F\n",
       "28    Armanda      Hendley       F    C+      C+     B-      0\n",
       "29     Raymon      Myerson       F     F       C     B-      F"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_of_letters = pd.DataFrame(np.array(grading_scores).reshape((30,5)),columns=[\"English\",\"Maths\",\"Science\",\"German\",\"Sports\"])\n",
    "table_of_letters_one =pd.concat([grades.iloc[:,:2],table_of_letters],axis=1)\n",
    "table_of_letters_one"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bceaeb85-f753-4aec-8a67-52961c89166b",
   "metadata": {},
   "source": [
    "### 2. 8 Assigning The Final Grades"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "id": "c3a65a24-9fac-4cc9-aa7d-da596a9f3f91",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_grade_percent = []\n",
    "for i in average_point_for_each_student:\n",
    "    final_grade_percent.append(grading(i*100))  \n",
    "grade_df=pd.DataFrame(final_grade_percent,columns=[\"Final Grade\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "id": "ec9836c1-073b-41c4-b414-53e64c7d1e0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "last_graded_names = pd.concat([grades[[\"First Name\",\"Last Name\"]],grade_df],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "id": "d54b2427-f1e2-4760-9974-80c4ab77bec4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>First Name</th>\n",
       "      <th>Last Name</th>\n",
       "      <th>Final Grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Robyn</td>\n",
       "      <td>Hobgood</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Eddy</td>\n",
       "      <td>Swearngin</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Leoma</td>\n",
       "      <td>Bridgman</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arnetta</td>\n",
       "      <td>Peart</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>Colby</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Sherron</td>\n",
       "      <td>Sherron</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Glendora</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Darlena</td>\n",
       "      <td>Gunn</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Aldo</td>\n",
       "      <td>Armas</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Tiny</td>\n",
       "      <td>Jack</td>\n",
       "      <td>C+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Elms</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lauretta</td>\n",
       "      <td>Herbert</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Almeta</td>\n",
       "      <td>Dimond</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Phoebe</td>\n",
       "      <td>Schill</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Krystyna</td>\n",
       "      <td>Paris</td>\n",
       "      <td>C+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Miyoko</td>\n",
       "      <td>Laffoon</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rebecca</td>\n",
       "      <td>Duck</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Elwanda</td>\n",
       "      <td>Hyland</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Gretchen</td>\n",
       "      <td>Kerrick</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Winnifred</td>\n",
       "      <td>Colonna</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Gidget</td>\n",
       "      <td>Casseus</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Elaina</td>\n",
       "      <td>Mcdougal</td>\n",
       "      <td>C+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Shoshana</td>\n",
       "      <td>Goldberger</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Nelson</td>\n",
       "      <td>A-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Lyle</td>\n",
       "      <td>Millsaps</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Janay</td>\n",
       "      <td>Julius</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Devorah</td>\n",
       "      <td>Heyden</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Thelma</td>\n",
       "      <td>Romberger</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Armanda</td>\n",
       "      <td>Hendley</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Raymon</td>\n",
       "      <td>Myerson</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   First Name    Last Name Final Grade\n",
       "0       Robyn      Hobgood           F\n",
       "1        Eddy    Swearngin          B-\n",
       "2       Leoma     Bridgman           B\n",
       "3     Arnetta        Peart          B+\n",
       "4    Maryland        Colby          B+\n",
       "5     Sherron      Sherron           F\n",
       "6    Glendora  Christopher          B+\n",
       "7     Darlena         Gunn          B-\n",
       "8        Aldo        Armas           A\n",
       "9        Tiny         Jack          C+\n",
       "10    Carlton         Elms           F\n",
       "11   Lauretta      Herbert           F\n",
       "12     Almeta       Dimond          B+\n",
       "13     Phoebe       Schill           B\n",
       "14   Krystyna        Paris          C+\n",
       "15     Miyoko      Laffoon          B+\n",
       "16    Rebecca         Duck           F\n",
       "17    Elwanda       Hyland           D\n",
       "18   Gretchen      Kerrick           F\n",
       "19  Winnifred      Colonna          B-\n",
       "20     Gidget      Casseus           A\n",
       "21     Elaina     Mcdougal          C+\n",
       "22   Shoshana   Goldberger           A\n",
       "23  Argentina       Nelson          A-\n",
       "24       Lyle     Millsaps          B-\n",
       "25      Janay       Julius          B-\n",
       "26    Devorah       Heyden           F\n",
       "27     Thelma    Romberger          B-\n",
       "28    Armanda      Hendley           F\n",
       "29     Raymon      Myerson           F"
      ]
     },
     "execution_count": 424,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "last_graded_names"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24be8b1f-6357-47b7-9e27-f955fdc0f508",
   "metadata": {},
   "source": [
    "### 2. 9 Histogram of the Final Grades"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "id": "a48b06e9-880e-42cb-b183-2d1d362bb58e",
   "metadata": {},
   "outputs": [],
   "source": [
    "grade_percent = []\n",
    "for i in average_point_for_each_student:\n",
    "    grade_percent.append(i*100)  \n",
    "grade_percent_df=pd.DataFrame(grade_percent,columns=[\"Final Grade\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "id": "701b4a2e-5031-4648-82e5-e9c5388e6efd",
   "metadata": {},
   "outputs": [],
   "source": [
    "last_graded_names = pd.concat([grades[[\"First Name\",\"Last Name\"]], grade_percent_df],axis=1)\n",
    "#sorting the list\n",
    "sorted_table = last_graded_names .sort_values(by=['Final Grade'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "id": "9e500e82-b429-4bb4-8ba7-fbaa7eb0dc2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted_grades = []\n",
    "for i in sorted_table[\"Final Grade\"]:\n",
    "    sorted_grades.append(grading(i))\n",
    "    \n",
    "sorted_grades_table =pd.DataFrame(sorted_grades,columns=[\"Final Grade\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "id": "80e135ad-0d8f-4f8d-b9ef-44e0192514fc",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>First Name</th>\n",
       "      <th>Last Name</th>\n",
       "      <th>Final Grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Robyn</td>\n",
       "      <td>Hobgood</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Eddy</td>\n",
       "      <td>Swearngin</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Leoma</td>\n",
       "      <td>Bridgman</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arnetta</td>\n",
       "      <td>Peart</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>Colby</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Sherron</td>\n",
       "      <td>Sherron</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Glendora</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Darlena</td>\n",
       "      <td>Gunn</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Aldo</td>\n",
       "      <td>Armas</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Tiny</td>\n",
       "      <td>Jack</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Carlton</td>\n",
       "      <td>Elms</td>\n",
       "      <td>C+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lauretta</td>\n",
       "      <td>Herbert</td>\n",
       "      <td>C+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Almeta</td>\n",
       "      <td>Dimond</td>\n",
       "      <td>C+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Phoebe</td>\n",
       "      <td>Schill</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Krystyna</td>\n",
       "      <td>Paris</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Miyoko</td>\n",
       "      <td>Laffoon</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rebecca</td>\n",
       "      <td>Duck</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Elwanda</td>\n",
       "      <td>Hyland</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Gretchen</td>\n",
       "      <td>Kerrick</td>\n",
       "      <td>B-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Winnifred</td>\n",
       "      <td>Colonna</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Gidget</td>\n",
       "      <td>Casseus</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Elaina</td>\n",
       "      <td>Mcdougal</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Shoshana</td>\n",
       "      <td>Goldberger</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Nelson</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Lyle</td>\n",
       "      <td>Millsaps</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Janay</td>\n",
       "      <td>Julius</td>\n",
       "      <td>B+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Devorah</td>\n",
       "      <td>Heyden</td>\n",
       "      <td>A-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Thelma</td>\n",
       "      <td>Romberger</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Armanda</td>\n",
       "      <td>Hendley</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Raymon</td>\n",
       "      <td>Myerson</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   First Name    Last Name Final Grade\n",
       "0       Robyn      Hobgood           F\n",
       "1        Eddy    Swearngin           F\n",
       "2       Leoma     Bridgman           F\n",
       "3     Arnetta        Peart           F\n",
       "4    Maryland        Colby           F\n",
       "5     Sherron      Sherron           F\n",
       "6    Glendora  Christopher           F\n",
       "7     Darlena         Gunn           F\n",
       "8        Aldo        Armas           F\n",
       "9        Tiny         Jack           D\n",
       "10    Carlton         Elms          C+\n",
       "11   Lauretta      Herbert          C+\n",
       "12     Almeta       Dimond          C+\n",
       "13     Phoebe       Schill          B-\n",
       "14   Krystyna        Paris          B-\n",
       "15     Miyoko      Laffoon          B-\n",
       "16    Rebecca         Duck          B-\n",
       "17    Elwanda       Hyland          B-\n",
       "18   Gretchen      Kerrick          B-\n",
       "19  Winnifred      Colonna           B\n",
       "20     Gidget      Casseus           B\n",
       "21     Elaina     Mcdougal          B+\n",
       "22   Shoshana   Goldberger          B+\n",
       "23  Argentina       Nelson          B+\n",
       "24       Lyle     Millsaps          B+\n",
       "25      Janay       Julius          B+\n",
       "26    Devorah       Heyden          A-\n",
       "27     Thelma    Romberger           A\n",
       "28    Armanda      Hendley           A\n",
       "29     Raymon      Myerson           A"
      ]
     },
     "execution_count": 439,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "last_graded_names = pd.concat([grades[[\"First Name\",\"Last Name\"]],sorted_grades_table ],axis=1)\n",
    "last_graded_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "id": "cad63180-1166-47f9-95d8-7c56158f43b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Histogram of Grades\")\n",
    "plt.hist(sorted_grades_table)\n",
    "plt.xlabel(\"Grades\")\n",
    "plt.ylabel(\"Number of Students\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 429,
   "id": "bc8fbfdf-e6fa-473e-a74c-29ea37d3a9a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,6))\n",
    "plt.title(\"Histogram of Final Grades\")\n",
    "plt.hist(last_graded_names[\"Final Grade\"])\n",
    "plt.xlabel(\"Grade\")\n",
    "plt.ylabel(\"Number of Students\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e539ff3b-37fc-40b6-82d0-86867766c246",
   "metadata": {},
   "source": [
    "# EXERCISE 2: LINEAR REGRESSION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0b12665-49d8-49ba-a0cc-bf932866712f",
   "metadata": {},
   "source": [
    "## 1. GENERATING 3 SETS OF SIMPLE DATA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18338e26-d404-4677-ad5d-43724d871b6a",
   "metadata": {},
   "source": [
    "####  First Dataset $A_1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "id": "1d6a7b17-d923-4c38-aa7d-3e874fe6c0ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimension of A_one :\n",
      " (100, 2)\n"
     ]
    }
   ],
   "source": [
    "# A_one mean=2 and sigma=0.01\n",
    "A_one = np.random.normal(2, 0.01, 200).reshape(100,2)\n",
    "#checking the created matrix's dimension\n",
    "print('Dimension of A_one :\\n',A_one.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2a1f7d4-1952-42bb-8f4c-28b0a133ec4e",
   "metadata": {},
   "source": [
    "#### Second Dataset $A_2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "id": "305a9881-b77c-4b96-a243-44ac2b83ba35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimension of A_two :\n",
      " (100, 2)\n"
     ]
    }
   ],
   "source": [
    "# A_two mean=2 and sigma=0.1\n",
    "A_two = np.random.normal(2, 0.1, 200).reshape(100,2)\n",
    "#checking the created matrix's dimension\n",
    "print('Dimension of A_two :\\n',A_two.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2400d4b4-85e0-4022-ace7-9c36ee815692",
   "metadata": {},
   "source": [
    "#### Third Dataset $A_3$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "c1cbe591-4aa3-41e1-8f92-62e16e4e8f4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimension of A_three :\n",
      " (100, 2)\n"
     ]
    }
   ],
   "source": [
    "# A_three mean=2 and sigma=0.1\n",
    "A_three = np.random.normal(2, 0.1, 200).reshape(100,2)\n",
    "#checking the created matrix's dimension\n",
    "print('Dimension of A_three :\\n',A_three.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfd42c8a-1fbb-4fda-84a4-7a5966e5852a",
   "metadata": {},
   "source": [
    "## 2. IMPLEMENTING LINEAR REGRESSION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6df9fa9-8434-443c-a533-17af9181ddf3",
   "metadata": {},
   "source": [
    "### 2.1 CREATING DATASET X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0f31bee-4401-4fa7-8bc8-9a2a089848f8",
   "metadata": {},
   "source": [
    "Because first columns of matrix $A_1,A_2,A_3$ are coefficient of X vector without bias, after seperatinginto columns, we should add 1 for bias."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efd6b28f-a5f6-45dd-b53f-798164efb3c3",
   "metadata": {},
   "source": [
    "#### 2.1.1 Dataset $A_1$ : $X_1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "id": "09de358c-173b-4f5f-9eea-9507677f7e64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.99593089 1.        ]\n",
      " [1.9960532  1.        ]\n",
      " [1.98906522 1.        ]\n",
      " [2.00373279 1.        ]\n",
      " [1.99673064 1.        ]\n",
      " [2.01280898 1.        ]\n",
      " [2.00523354 1.        ]\n",
      " [1.99310941 1.        ]\n",
      " [1.99801966 1.        ]\n",
      " [2.01173641 1.        ]\n",
      " [1.99547985 1.        ]\n",
      " [2.01656331 1.        ]\n",
      " [1.98715264 1.        ]\n",
      " [2.00345687 1.        ]\n",
      " [2.0021417  1.        ]\n",
      " [2.01041505 1.        ]\n",
      " [1.9882218  1.        ]\n",
      " [2.00624693 1.        ]\n",
      " [2.00133041 1.        ]\n",
      " [2.00179754 1.        ]\n",
      " [1.99688527 1.        ]\n",
      " [2.00080537 1.        ]\n",
      " [1.9943873  1.        ]\n",
      " [2.0089631  1.        ]\n",
      " [1.99166513 1.        ]\n",
      " [1.99129276 1.        ]\n",
      " [1.99409432 1.        ]\n",
      " [1.9883929  1.        ]\n",
      " [2.0003745  1.        ]\n",
      " [1.99649425 1.        ]\n",
      " [1.99675674 1.        ]\n",
      " [2.02767918 1.        ]\n",
      " [1.98346343 1.        ]\n",
      " [1.99896211 1.        ]\n",
      " [1.99811815 1.        ]\n",
      " [1.99117659 1.        ]\n",
      " [2.00315198 1.        ]\n",
      " [1.98910439 1.        ]\n",
      " [2.01929581 1.        ]\n",
      " [1.99018228 1.        ]\n",
      " [1.98470183 1.        ]\n",
      " [2.00397374 1.        ]\n",
      " [2.00354058 1.        ]\n",
      " [1.99485699 1.        ]\n",
      " [2.01441774 1.        ]\n",
      " [2.0071799  1.        ]\n",
      " [2.00275166 1.        ]\n",
      " [2.00667104 1.        ]\n",
      " [1.99295237 1.        ]\n",
      " [1.9944553  1.        ]\n",
      " [1.99276205 1.        ]\n",
      " [1.98381901 1.        ]\n",
      " [1.99748402 1.        ]\n",
      " [2.0071303  1.        ]\n",
      " [1.99509995 1.        ]\n",
      " [1.98142148 1.        ]\n",
      " [2.00763181 1.        ]\n",
      " [2.00243804 1.        ]\n",
      " [2.01254896 1.        ]\n",
      " [1.98975034 1.        ]\n",
      " [2.0133986  1.        ]\n",
      " [1.9909456  1.        ]\n",
      " [1.99243194 1.        ]\n",
      " [2.00672332 1.        ]\n",
      " [2.00165128 1.        ]\n",
      " [2.01469833 1.        ]\n",
      " [2.01262358 1.        ]\n",
      " [1.99959344 1.        ]\n",
      " [2.00309335 1.        ]\n",
      " [1.99933376 1.        ]\n",
      " [1.99455802 1.        ]\n",
      " [2.00114056 1.        ]\n",
      " [2.01507517 1.        ]\n",
      " [2.00460091 1.        ]\n",
      " [2.0120099  1.        ]\n",
      " [1.99135469 1.        ]\n",
      " [1.97907078 1.        ]\n",
      " [1.98772106 1.        ]\n",
      " [2.00482904 1.        ]\n",
      " [2.00822518 1.        ]\n",
      " [1.99810585 1.        ]\n",
      " [2.00585098 1.        ]\n",
      " [1.99610103 1.        ]\n",
      " [1.99263081 1.        ]\n",
      " [2.02402226 1.        ]\n",
      " [2.00144032 1.        ]\n",
      " [2.00548792 1.        ]\n",
      " [1.99796623 1.        ]\n",
      " [1.98631503 1.        ]\n",
      " [2.00317954 1.        ]\n",
      " [1.99849481 1.        ]\n",
      " [2.01137586 1.        ]\n",
      " [2.00911699 1.        ]\n",
      " [2.00531283 1.        ]\n",
      " [1.98891738 1.        ]\n",
      " [1.99616943 1.        ]\n",
      " [2.00498118 1.        ]\n",
      " [1.99621266 1.        ]\n",
      " [1.99235308 1.        ]\n",
      " [1.99896415 1.        ]]\n"
     ]
    }
   ],
   "source": [
    "X_without_bias_one = A_one[:,0].reshape(100,1)\n",
    "\n",
    "#creating a 1 column vector\n",
    "one_vector =np.ones((100,1))\n",
    "\n",
    "#combining the ones vector\n",
    "X_one =np.hstack((X_without_bias_one,one_vector))\n",
    "print(X_one)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71fe187a-57ec-4f21-83e4-f07493431532",
   "metadata": {},
   "source": [
    "Now, we should add bias column."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1e9e94e-f702-443e-ae26-1e6efc2a70cf",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### 2.1.2 Dataset $A_2$: $X_2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "id": "fb66eeef-5786-421c-8c56-e51bfe2ad63c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2.07991532, 1.        ],\n",
       "       [1.97660948, 1.        ],\n",
       "       [1.99151244, 1.        ],\n",
       "       [1.89622074, 1.        ],\n",
       "       [1.92178921, 1.        ],\n",
       "       [2.07561422, 1.        ],\n",
       "       [2.03932894, 1.        ],\n",
       "       [1.90545714, 1.        ],\n",
       "       [1.96844409, 1.        ],\n",
       "       [1.89781087, 1.        ],\n",
       "       [2.00301742, 1.        ],\n",
       "       [2.18542488, 1.        ],\n",
       "       [2.16407428, 1.        ],\n",
       "       [1.91953005, 1.        ],\n",
       "       [1.85050638, 1.        ],\n",
       "       [2.07031565, 1.        ],\n",
       "       [1.92331321, 1.        ],\n",
       "       [1.97517205, 1.        ],\n",
       "       [1.87783357, 1.        ],\n",
       "       [2.00672477, 1.        ],\n",
       "       [2.13107728, 1.        ],\n",
       "       [1.89039784, 1.        ],\n",
       "       [2.03881138, 1.        ],\n",
       "       [1.92007884, 1.        ],\n",
       "       [2.00033549, 1.        ],\n",
       "       [1.86324729, 1.        ],\n",
       "       [1.94598159, 1.        ],\n",
       "       [1.70870864, 1.        ],\n",
       "       [2.0186096 , 1.        ],\n",
       "       [2.0034296 , 1.        ],\n",
       "       [2.07085931, 1.        ],\n",
       "       [2.00871541, 1.        ],\n",
       "       [1.88508013, 1.        ],\n",
       "       [1.94352819, 1.        ],\n",
       "       [1.93819386, 1.        ],\n",
       "       [1.91700785, 1.        ],\n",
       "       [2.03764679, 1.        ],\n",
       "       [1.98900752, 1.        ],\n",
       "       [1.88001326, 1.        ],\n",
       "       [1.91362244, 1.        ],\n",
       "       [2.03596   , 1.        ],\n",
       "       [2.0788383 , 1.        ],\n",
       "       [1.97417025, 1.        ],\n",
       "       [1.97601896, 1.        ],\n",
       "       [1.88122201, 1.        ],\n",
       "       [2.13807126, 1.        ],\n",
       "       [1.9998436 , 1.        ],\n",
       "       [1.86580919, 1.        ],\n",
       "       [1.93306144, 1.        ],\n",
       "       [1.93713284, 1.        ],\n",
       "       [1.8548274 , 1.        ],\n",
       "       [1.8443569 , 1.        ],\n",
       "       [1.92343034, 1.        ],\n",
       "       [1.92680786, 1.        ],\n",
       "       [1.99254443, 1.        ],\n",
       "       [1.99020674, 1.        ],\n",
       "       [1.84923278, 1.        ],\n",
       "       [1.87112598, 1.        ],\n",
       "       [1.84100514, 1.        ],\n",
       "       [2.17895944, 1.        ],\n",
       "       [2.13948312, 1.        ],\n",
       "       [2.07528186, 1.        ],\n",
       "       [2.06153035, 1.        ],\n",
       "       [2.00716927, 1.        ],\n",
       "       [2.06748055, 1.        ],\n",
       "       [1.91868944, 1.        ],\n",
       "       [1.87386216, 1.        ],\n",
       "       [2.05370957, 1.        ],\n",
       "       [2.12471866, 1.        ],\n",
       "       [1.89381965, 1.        ],\n",
       "       [2.13389811, 1.        ],\n",
       "       [1.99141053, 1.        ],\n",
       "       [1.96632624, 1.        ],\n",
       "       [1.97196732, 1.        ],\n",
       "       [2.10110626, 1.        ],\n",
       "       [2.00598497, 1.        ],\n",
       "       [2.01185718, 1.        ],\n",
       "       [1.84823578, 1.        ],\n",
       "       [1.9193783 , 1.        ],\n",
       "       [1.95644831, 1.        ],\n",
       "       [2.25684759, 1.        ],\n",
       "       [2.06314529, 1.        ],\n",
       "       [1.94984741, 1.        ],\n",
       "       [2.0504251 , 1.        ],\n",
       "       [1.84592118, 1.        ],\n",
       "       [1.99525847, 1.        ],\n",
       "       [2.09789115, 1.        ],\n",
       "       [2.04978995, 1.        ],\n",
       "       [2.10823646, 1.        ],\n",
       "       [2.20124557, 1.        ],\n",
       "       [2.04912351, 1.        ],\n",
       "       [2.05600475, 1.        ],\n",
       "       [1.97648922, 1.        ],\n",
       "       [2.11423912, 1.        ],\n",
       "       [2.08861501, 1.        ],\n",
       "       [1.92066446, 1.        ],\n",
       "       [1.90327602, 1.        ],\n",
       "       [2.139363  , 1.        ],\n",
       "       [2.04892193, 1.        ],\n",
       "       [1.93768502, 1.        ]])"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_without_bias_two = A_two[:,0].reshape(100,1)\n",
    "\n",
    "#creating a 1 column vector\n",
    "one_vector =np.ones((100,1))\n",
    "\n",
    "#combining the ones vector\n",
    "X_two =np.hstack((X_without_bias_two,one_vector))\n",
    "X_two"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0c1aefa-36f4-4e13-a897-2008614b0bd5",
   "metadata": {},
   "source": [
    "#### 2.1.3 Dataset $A_3$: $X_3$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "id": "41549292-80dd-4760-a38c-9f11c93ec3c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.79023126, 1.        ],\n",
       "       [2.17141823, 1.        ],\n",
       "       [2.04148062, 1.        ],\n",
       "       [2.07024312, 1.        ],\n",
       "       [1.93807885, 1.        ],\n",
       "       [2.03702248, 1.        ],\n",
       "       [1.93944052, 1.        ],\n",
       "       [1.96035005, 1.        ],\n",
       "       [1.92960946, 1.        ],\n",
       "       [1.8456907 , 1.        ],\n",
       "       [2.0055499 , 1.        ],\n",
       "       [2.0721691 , 1.        ],\n",
       "       [1.94468795, 1.        ],\n",
       "       [1.96098564, 1.        ],\n",
       "       [2.01245451, 1.        ],\n",
       "       [1.74979777, 1.        ],\n",
       "       [2.04319236, 1.        ],\n",
       "       [2.17788367, 1.        ],\n",
       "       [1.78805491, 1.        ],\n",
       "       [2.10447588, 1.        ],\n",
       "       [2.07691689, 1.        ],\n",
       "       [2.05462155, 1.        ],\n",
       "       [2.09023578, 1.        ],\n",
       "       [1.92945911, 1.        ],\n",
       "       [2.13054376, 1.        ],\n",
       "       [2.05763943, 1.        ],\n",
       "       [2.00984433, 1.        ],\n",
       "       [1.88544927, 1.        ],\n",
       "       [2.08129217, 1.        ],\n",
       "       [1.96554453, 1.        ],\n",
       "       [1.79210421, 1.        ],\n",
       "       [1.95980256, 1.        ],\n",
       "       [1.82618108, 1.        ],\n",
       "       [2.01866217, 1.        ],\n",
       "       [1.8378782 , 1.        ],\n",
       "       [2.15541181, 1.        ],\n",
       "       [2.10448071, 1.        ],\n",
       "       [2.18703387, 1.        ],\n",
       "       [2.09071722, 1.        ],\n",
       "       [2.08730755, 1.        ],\n",
       "       [1.84092408, 1.        ],\n",
       "       [1.98581196, 1.        ],\n",
       "       [2.12105352, 1.        ],\n",
       "       [2.05097338, 1.        ],\n",
       "       [2.15585009, 1.        ],\n",
       "       [1.89530303, 1.        ],\n",
       "       [2.12288355, 1.        ],\n",
       "       [1.83850603, 1.        ],\n",
       "       [1.77459041, 1.        ],\n",
       "       [2.01377594, 1.        ],\n",
       "       [1.89071073, 1.        ],\n",
       "       [2.08054799, 1.        ],\n",
       "       [2.11450279, 1.        ],\n",
       "       [2.05803762, 1.        ],\n",
       "       [1.95667718, 1.        ],\n",
       "       [1.9632969 , 1.        ],\n",
       "       [1.98376743, 1.        ],\n",
       "       [2.13899471, 1.        ],\n",
       "       [2.0082247 , 1.        ],\n",
       "       [1.9872436 , 1.        ],\n",
       "       [1.94672989, 1.        ],\n",
       "       [1.85926744, 1.        ],\n",
       "       [2.10009289, 1.        ],\n",
       "       [2.0489348 , 1.        ],\n",
       "       [2.13140796, 1.        ],\n",
       "       [1.99820774, 1.        ],\n",
       "       [1.88159528, 1.        ],\n",
       "       [1.94939302, 1.        ],\n",
       "       [1.80837681, 1.        ],\n",
       "       [1.93506966, 1.        ],\n",
       "       [2.18006797, 1.        ],\n",
       "       [2.05867514, 1.        ],\n",
       "       [2.02795152, 1.        ],\n",
       "       [1.8270303 , 1.        ],\n",
       "       [2.01838127, 1.        ],\n",
       "       [1.92605687, 1.        ],\n",
       "       [2.04018777, 1.        ],\n",
       "       [1.87808334, 1.        ],\n",
       "       [1.95227403, 1.        ],\n",
       "       [2.2254834 , 1.        ],\n",
       "       [1.9574999 , 1.        ],\n",
       "       [2.02761625, 1.        ],\n",
       "       [2.13043879, 1.        ],\n",
       "       [2.13017943, 1.        ],\n",
       "       [2.11655707, 1.        ],\n",
       "       [2.01597605, 1.        ],\n",
       "       [2.05553692, 1.        ],\n",
       "       [1.80758321, 1.        ],\n",
       "       [1.93902584, 1.        ],\n",
       "       [2.1298798 , 1.        ],\n",
       "       [1.99375659, 1.        ],\n",
       "       [1.80123621, 1.        ],\n",
       "       [2.20693737, 1.        ],\n",
       "       [1.97350804, 1.        ],\n",
       "       [2.09053509, 1.        ],\n",
       "       [2.06954963, 1.        ],\n",
       "       [2.01470873, 1.        ],\n",
       "       [1.90690026, 1.        ],\n",
       "       [2.05941253, 1.        ],\n",
       "       [2.09001262, 1.        ]])"
      ]
     },
     "execution_count": 333,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_without_bias_three = A_three[:,0].reshape(100,1)\n",
    "\n",
    "#creating a 1 column vector\n",
    "one_vector =np.ones((100,1))\n",
    "\n",
    "#combining the ones vector\n",
    "X_three =np.hstack((X_without_bias_three,one_vector))\n",
    "X_three"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "633d0596-7796-4d46-bb8f-5309b8dacfba",
   "metadata": {},
   "source": [
    "### 2.2 CREATING DATASET Y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02ef9d5d-10c6-4a57-805e-17dfa9daa405",
   "metadata": {},
   "source": [
    "#### 2.2.1 Dataset $A_1$: $Y_1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "id": "a82fd966-1558-4629-b020-f4cdeb11252c",
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_one = A_one[:,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79ae3f4c-2a8b-4916-a53b-dc51ec89e9c4",
   "metadata": {},
   "source": [
    "#### 2.2.2 Dataset $A_2$: $Y_2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "id": "aef7af87-cae1-4e73-9332-1f334e441ba1",
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_two= A_two[:,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0098849a-1afa-4046-8e88-5c1cc8ca2f1e",
   "metadata": {},
   "source": [
    "#### 2.2.3 Dataset $A_3$: $Y_3$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "id": "7efafb7d-99e9-43c7-9b17-aeb5c73d4f91",
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_three= A_three[:,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67aa9542-8286-44ad-8767-db292aa65f9c",
   "metadata": {},
   "source": [
    "### 2.3 LINEAR REGRESSION LEARNING ALGORTIHM"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aee8c670-6bad-4152-ba2d-3992980a6248",
   "metadata": {},
   "source": [
    "We will use $\\beta= (X^TX)^{-1}X^TY$ formula. First we will calculate $H^{-1}=(X^TX)^{-1}$. Then we will find betas coefficients for each datasets."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9377f117-38ed-41ac-98f3-52d245e21d17",
   "metadata": {},
   "source": [
    "#### $A_1$ Dataset: Creating  ${H_1}^{-1}=({X_1}^T{X_1})^{-1}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "id": "d00111e2-72f1-4812-8501-11044dc8b2e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#transpose of x_one\n",
    "X_transpose_one = np.transpose(X_one)\n",
    "\n",
    "#matrix multiplication of x_onr and its transpose\n",
    "H_one = np.matmul(X_transpose_one,X_one)\n",
    "\n",
    "#inverse of matrix multiplication of x_one and its transpose\n",
    "H_inverse_one = np.linalg.inv(H_one)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25951144-0465-4077-886c-509d101476d5",
   "metadata": {},
   "source": [
    "#### $A_2$ Dataset: Creating ${H_2}^{-1}=({X_2}^T{X_2})^{-1}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "id": "309d85bd-2874-4021-b637-b989fe91a938",
   "metadata": {},
   "outputs": [],
   "source": [
    "#transpose of x_one\n",
    "X_transpose_two = np.transpose(X_two)\n",
    "\n",
    "#matrix multiplication of x_onr and its transpose\n",
    "H_two = np.matmul(X_transpose_two,X_two)\n",
    "\n",
    "#inverse of matrix multiplication of x_one and its transpose\n",
    "H_inverse_two = np.linalg.inv(H_two)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c389d65b-c841-4b0e-a89d-c28efa0a06ff",
   "metadata": {},
   "source": [
    "#### $A_3$ Dataset: Creating ${H_3}^{-1}=({X_3}^T{X_3})^{-1}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "id": "ec269d2c-2f91-46d5-82d2-984bb044a2dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#transpose of x_one\n",
    "X_transpose_three = np.transpose(X_three)\n",
    "\n",
    "#matrix multiplication of x_onr and its transpose\n",
    "H_three = np.matmul(X_transpose_three,X_three)\n",
    "\n",
    "#inverse of matrix multiplication of x_one and its transpose\n",
    "H_inverse_three = np.linalg.inv(H_three)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16f9817b-bc42-4806-a460-51f4bfa6f4f0",
   "metadata": {},
   "source": [
    "#### $A_1$ Dataset: Creating ${\\beta}_1= ({X_1}^T{X_1})^{-1}{X_1}^T{Y_1} $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "id": "e4c1a6f8-8ac0-491f-ab45-5efeab0380cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Beta_one= [0.05860807 1.88318874]\n"
     ]
    }
   ],
   "source": [
    "#betas_one for dataset A_one\n",
    "beta_by_lineerreg_one = np.matmul(np.matmul(H_inverse_one,X_transpose_one),Y_one)\n",
    "print(\"Beta_one=\",beta_by_lineerreg_one)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14bf9efa-2169-4979-9593-2d395b429769",
   "metadata": {},
   "source": [
    "#### $A_2$ Dataset: Creating ${\\beta}_2= ({X_2}^T{X_2})^{-1}{X_2}^T{Y_2} $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "id": "bab0cb50-a089-4320-bad5-6857d50c8de0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Beta_two= [-0.00573152  2.00996781]\n"
     ]
    }
   ],
   "source": [
    "#betas_two for data set A_two\n",
    "beta_by_lineerreg_two = np.matmul(np.matmul(H_inverse_two,X_transpose_two),Y_two)\n",
    "print(\"Beta_two=\",beta_by_lineerreg_two)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ebc45a7-b89c-45d4-8036-e24556a3d817",
   "metadata": {},
   "source": [
    "#### $A_3$ Dataset: Creating ${\\beta}_3= ({X_3}^T{X_3})^{-1}{X_3}^T{Y_3} $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "id": "0d8bef2c-cd48-498e-9d6c-72e47306498e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Beta_three= [0.03410287 1.93550164]\n"
     ]
    }
   ],
   "source": [
    "#betas_three for data set A_theww\n",
    "beta_by_lineerreg_three = np.matmul(np.matmul(H_inverse_three,X_transpose_three),Y_three)\n",
    "print(\"Beta_three=\",beta_by_lineerreg_three)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34216cf5-517f-44cb-9a07-9640c05e21d3",
   "metadata": {
    "tags": []
   },
   "source": [
    "### 2.4 LINEAR REGRESSION PREDICTION ALGORTIHM"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b2464d2-9f60-47d6-b4d9-e513a0a27ea2",
   "metadata": {},
   "source": [
    "#### $A_1$ Dataset : Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "id": "bc303ca4-5bca-445a-9c24-43ec853948c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.00016641, 2.00017358, 1.99976403, 2.00062366, 2.00021328,\n",
       "       2.0011556 , 2.00071162, 2.00000105, 2.00028883, 2.00109274,\n",
       "       2.00013998, 2.00137564, 1.99965193, 2.00060749, 2.00053041,\n",
       "       2.0010153 , 1.9997146 , 2.00077101, 2.00048287, 2.00051024,\n",
       "       2.00022234, 2.00045209, 2.00007594, 2.0009302 , 1.9999164 ,\n",
       "       1.99989458, 2.00005877, 1.99972462, 2.00042684, 2.00019943,\n",
       "       2.00021481, 2.00202712, 1.99943572, 2.00034406, 2.0002946 ,\n",
       "       1.99988777, 2.00058962, 1.99976632, 2.00153578, 1.9998295 ,\n",
       "       1.9995083 , 2.00063779, 2.0006124 , 2.00010347, 2.00124989,\n",
       "       2.00082569, 2.00056616, 2.00079587, 1.99999184, 2.00007993,\n",
       "       1.99998069, 1.99945656, 2.00025744, 2.00082279, 2.00011771,\n",
       "       1.99931604, 2.00085218, 2.00054778, 2.00114036, 1.99980418,\n",
       "       2.00119016, 1.99987423, 1.99996134, 2.00079893, 2.00050167,\n",
       "       2.00126633, 2.00114474, 2.00038107, 2.00058619, 2.00036585,\n",
       "       2.00008595, 2.00047174, 2.00128842, 2.00067454, 2.00110877,\n",
       "       1.99989821, 1.99917827, 1.99968525, 2.00068791, 2.00088695,\n",
       "       2.00029388, 2.00074781, 2.00017638, 1.999973  , 2.00181279,\n",
       "       2.00048931, 2.00072653, 2.0002857 , 1.99960284, 2.00059124,\n",
       "       2.00031668, 2.00107161, 2.00093922, 2.00071627, 1.99975536,\n",
       "       2.00018039, 2.00069683, 2.00018292, 1.99995672, 2.00034418])"
      ]
     },
     "execution_count": 362,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions_bylineerreg_one =np.matmul(X_one,beta_by_lineerreg_one)\n",
    "predictions_bylineerreg_one"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcfaaebf-a0d2-4661-ba4a-56c7b9c83be6",
   "metadata": {},
   "source": [
    "#### $A_2$ Dataset : Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "id": "979a3f28-13cf-47b2-b9b5-f6883f3907bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.99804673, 1.99863883, 1.99855341, 1.99909958, 1.99895303,\n",
       "       1.99807138, 1.99827935, 1.99904664, 1.99868563, 1.99909047,\n",
       "       1.99848747, 1.997442  , 1.99756437, 1.99896598, 1.99936159,\n",
       "       1.99810175, 1.9989443 , 1.99864707, 1.99920497, 1.99846622,\n",
       "       1.99775349, 1.99913295, 1.99828232, 1.99896284, 1.99850284,\n",
       "       1.99928857, 1.99881437, 2.00017431, 1.9983981 , 1.99848511,\n",
       "       1.99809863, 1.99845481, 1.99916343, 1.99882844, 1.99885901,\n",
       "       1.99898044, 1.99828899, 1.99856777, 1.99919247, 1.99899984,\n",
       "       1.99829866, 1.9980529 , 1.99865281, 1.99864221, 1.99918554,\n",
       "       1.99771341, 1.99850566, 1.99927388, 1.99888843, 1.99886509,\n",
       "       1.99933683, 1.99939684, 1.99894363, 1.99892427, 1.9985475 ,\n",
       "       1.9985609 , 1.99936889, 1.99924341, 1.99941605, 1.99747906,\n",
       "       1.99770532, 1.99807329, 1.9981521 , 1.99846368, 1.998118  ,\n",
       "       1.9989708 , 1.99922773, 1.99819693, 1.99778994, 1.99911334,\n",
       "       1.99773733, 1.998554  , 1.99869777, 1.99866544, 1.99792527,\n",
       "       1.99847046, 1.99843681, 1.99937461, 1.99896685, 1.99875438,\n",
       "       1.99703264, 1.99814285, 1.99879222, 1.99821575, 1.99938787,\n",
       "       1.99853194, 1.9979437 , 1.99821939, 1.99788441, 1.99735132,\n",
       "       1.99822321, 1.99818377, 1.99863952, 1.99785   , 1.99799687,\n",
       "       1.99895948, 1.99905914, 1.997706  , 1.99822437, 1.99886193])"
      ]
     },
     "execution_count": 363,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions_bylineerreg_two =np.matmul(X_two,beta_by_lineerreg_two)\n",
    "predictions_bylineerreg_two"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81e89cf1-1598-447e-a88e-590fb260bd1b",
   "metadata": {},
   "source": [
    "#### $A_3$ Dataset : Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "id": "dc2d37c4-1e83-460f-8e4c-916d1fc30697",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.99655367, 2.00955324, 2.005122  , 2.00610288, 2.0015957 ,\n",
       "       2.00496996, 2.00164214, 2.00235521, 2.00130687, 1.998445  ,\n",
       "       2.00389666, 2.00616856, 2.00182109, 2.00237689, 2.00413212,\n",
       "       1.99517477, 2.00518037, 2.00977373, 1.99647945, 2.00727032,\n",
       "       2.00633047, 2.00557014, 2.00678469, 2.00130174, 2.0081593 ,\n",
       "       2.00567306, 2.00404311, 1.99980088, 2.00647968, 2.00253236,\n",
       "       1.99661754, 2.00233654, 1.99777966, 2.00434382, 1.99817857,\n",
       "       2.00900738, 2.00727048, 2.01008578, 2.00680111, 2.00668483,\n",
       "       1.99828244, 2.00322353, 2.00783566, 2.00544573, 2.00902232,\n",
       "       2.00013692, 2.00789807, 1.99819998, 1.99602027, 2.00417719,\n",
       "       1.99998031, 2.00645431, 2.00761226, 2.00568664, 2.00222996,\n",
       "       2.00245571, 2.00315381, 2.00844751, 2.00398787, 2.00327236,\n",
       "       2.00189072, 1.998908  , 2.00712084, 2.00537621, 2.00818878,\n",
       "       2.00364627, 1.99966945, 2.00198154, 1.99717249, 2.00149308,\n",
       "       2.00984822, 2.00570838, 2.00466061, 1.99780862, 2.00433424,\n",
       "       2.00118571, 2.00507791, 1.99954968, 2.0020798 , 2.01139702,\n",
       "       2.00225801, 2.00464918, 2.00815573, 2.00814688, 2.00768232,\n",
       "       2.00425222, 2.00560136, 1.99714542, 2.00162799, 2.00813666,\n",
       "       2.00349447, 1.99692897, 2.01076455, 2.00280394, 2.00679489,\n",
       "       2.00607923, 2.004209  , 2.00053242, 2.00573353, 2.00677708])"
      ]
     },
     "execution_count": 364,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions_bylineerreg_three =np.matmul(X_three,beta_by_lineerreg_three)\n",
    "predictions_bylineerreg_three "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46adf6e1-e029-40aa-868c-798ca6696530",
   "metadata": {},
   "source": [
    "### 2.5. PLOTTING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb579e68-a111-4f05-b7c1-0341645d3899",
   "metadata": {},
   "source": [
    "#### $A_1$ Dataset: Plotting "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "id": "e403d7cc-8a78-4bec-b405-7113a8d0299b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Prediction Vs Real Values (Linear Regression Algorithm) \\n Dataset $A_1$')\n",
    "plt.scatter(list(range(100)),Y_one , label=\"original\")\n",
    "plt.scatter(list(range(100)), predictions_bylineerreg_one, label=\"prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a09959ad-9aac-4f39-b9e8-f16cd05d5bfd",
   "metadata": {},
   "source": [
    "#### $A_2$ Dataset: Plotting "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "id": "bba7997f-dbec-48e4-92bf-1845f47c5c57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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5vwS+5cBJwYmUbm8ci88fBVs9mbn177jvgMMPLemQy9YsIA77riDlpYWvvKVr2x3kTQ0NDBt2jRWrlzJ6NGjefzxx+nUqRM//vGPueWWW7juuuv42te+xtSpUznkkEM477zzCh7/qquu4rjjjuOBBx5g69atrF+/ntbWVubMmcPs2bMB94Bp5+c//zkAr776KvPnz+fEE0/k9ddfB2D27NnMmjWLPffckz59+nDllVfSs2fPmupvGEaySWyuGJ4Yv0Opt7N5o9teIz179qSlpQWACy64gGnTpgFsV9TPP/88c+fOpaWlhcGDBzNp0iSWLFnC/Pnz6d27N4ceeigiwgUXXFDw+FOnTuXyyy8HXKbHUrllpk2bxoUXXgi4/O29evXarthHjRpF165daWho4LDDDmPJkiU1198wjGST3JQCa9sq214B+S+Abv/enrpXVTnhhBOYPHnyTuVmz54dysuji+XzaU8FDDunAzYMI7sk12Lv2qOy7RXw9ttv89xzzwEwefJkRowYsdP+4cOHM336dBYuXAjAhg0beP311+nbty+LFi3izTff3P7bQowaNYpf/OIXgJuIXbduHV26dOHDDz8sWP7YY4/l7rvvBuD111/n7bffpk8fCyszjCBJ0+sAk6vYR90AHfMWQ3RsdNtrpF+/fkyaNImBAweyatWq7W6Tdvbff38mTpzI+eefz8CBAxk+fDjz58+noaGBCRMmcNpppzFixIidXqGXy6233sqTTz7JgAEDOPzww3nttdfYd999aWlpoX///lx77bU7lb/iiivYunUrAwYM4LzzzmPixIk7WeqGYdRG2vLIJzptL6/c63zqa9ucpT7qhponThcvXszpp5/OnDlzajpOnLC0vYZRnJbWqQWzUjZ1a2T6uJERSORP6tP2MvDcmhW5YRhGWK/ajIrkumJCorm5OVXWumEYpUlb7htT7IZhZJ605b6JnStGVUMJGcwqUc2hGEaSaE+NEIdXbQZBrBR7Q0MDH3zwAfvuu68p9wBQVT744AMaGhqiFsUwYk+act/ESrH36NGDtrY2LKVvcDQ0NNCjR+2x/YZhJIdYKfaOHTvSu3fvqMUwDMNINDZ5ahiGkTJMsRuGYaQMU+yGYRgpI7KUAiKyAqg2x+x+QH1e5hEvsljvLNYZslnvLNYZKq93L1Ut+m7RyBR7LYjIjFK5EtJIFuudxTpDNuudxTpDOPU2V4xhGEbKMMVuGIaRMpKq2CdELUBEZLHeWawzZLPeWawzhFDvRPrYDcMwDH+SarEbhmEYPiROsYvIySKyQEQWisi4qOUJAxHpKSJPisg8EXlNRK72tn9KRB4TkTe8//tELWvQiEgHEZklIn/yvmehzt1E5D4Rme/1+VEZqfc3vet7johMFpGGtNVbRH4tIu+LyJycbb51FJHrPd22QEROqva8iVLsItIB+DlwCnAYcL6IHBatVKGwBfiWqvYDhgP/5NVzHPCEqh4KPOF9TxtXA/NyvmehzrcCf1XVvsAgXP1TXW8RaQKuAoapan+gA/Al0lfvicDJedsK1tG7x78EfMb7zW2ezquYRCl24Ahgoaq+paqfAL8DzopYpsBR1eWq+pL3+UPcjd6Eq+skr9gk4OxIBAwJEekBnAb8Kmdz2uu8N3AscAeAqn6iqmtIeb09dgcaRWR3YC9gGSmrt6o+DazK2+xXx7OA36nqx6q6CFiI03kVkzTF3gS8k/O9zduWWkSkGRgCvAAcoKrLwSl/4O8iFC0MfgpcB2zL2Zb2On8aWAHc6bmgfiUinUh5vVV1KXAz8DawHFirqo+S8np7+NUxMP2WNMVe6O0bqQ3rEZHOwP3ANaq6Lmp5wkRETgfeV9WZUctSZ3YHhgK/UNUhwEck3/1QEs+vfBbQG+gOdBKRC6KVKnIC029JU+xtQM+c7z1ww7fUISIdcUr9blWd4m1+T0QO8vYfBLwflXwh0AKcKSKLcS62kSLyW9JdZ3DXdJuqvuB9vw+n6NNe788Di1R1hapuBqYAR5P+eoN/HQPTb0lT7P8POFREeovIHriJhocililwxL0X8A5gnqrekrPrIWCM93kM8Md6yxYWqnq9qvZQ1WZcv05V1QtIcZ0BVPVd4B0RaX9r8ihgLimvN84FM1xE9vKu91G4uaS01xv86/gQ8CUR2VNEegOHAi9WdQZVTdQfcCrwOvAm8N2o5QmpjiNwQ7BXgNne36nAvrhZ9De8/5+KWtaQ6n888Cfvc+rrDAwGZnj9/SCwT0bq/a/AfGAO8Btgz7TVG5iMm0PYjLPIv1qsjsB3Pd22ADil2vPaylPDMIyUkTRXjGEYhlECU+yGYRgpwxS7YRhGyjDFbhiGkTJMsRuGYaQMU+yGYRgpwxS7YRhGyjDFbhiGkTL+P3uRw75y1HXfAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Prediction Vs Real Values (Linear Regression Algorithm) \\n Dataset $A_2$')\n",
    "plt.scatter(list(range(100)),Y_two , label=\"original\")\n",
    "plt.scatter(list(range(100)), predictions_bylineerreg_two, label=\"prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a2092c9-26cd-4ddc-8ce9-35995ca49dd2",
   "metadata": {},
   "source": [
    "#### $A_3$ Dataset: Plotting "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "id": "8eb6583e-b26a-45ef-aa1b-aad931e06147",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Prediction Vs Real Values (Linear Regression Algorithm) \\n Dataset $A_3$')\n",
    "plt.scatter(list(range(100)),Y_three , label=\"original\")\n",
    "plt.scatter(list(range(100)), predictions_bylineerreg_three, label=\"prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4593683a-f6da-4e37-b089-0947c18406b5",
   "metadata": {},
   "source": [
    "### 2.6 PLOTTING WHILE $\\beta_0=0$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "id": "99e36ec5-d4f6-4985-bb28-f7da0552b2fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#prediction point without bias on A_one dataset\n",
    "predictions_withoutbias_one =np.matmul(X_one,(beta_by_lineerreg_one[0],0))\n",
    "\n",
    "#prediction point without bias on A_two dataset\n",
    "predictions_withoutbias_two =np.matmul(X_two,(beta_by_lineerreg_two[0],0))\n",
    "\n",
    "#prediction point without bias on A_three dataset\n",
    "predictions_withoutbias_three =np.matmul(X_three,(beta_by_lineerreg_three[0],0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "id": "191f6de9-e64b-4d23-957e-1676b7783e0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Prediction Vs Real Values (without bias) \\n Dataset $A_1$')\n",
    "plt.scatter(list(range(100)),Y_one,color='red', label=\"original\")\n",
    "plt.scatter(list(range(100)), predictions_withoutbias_one,color='black', label=\"prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "id": "dde5c9ee-1bcd-4707-8665-b54587d13d50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAEZCAYAAACHCd7XAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAoJElEQVR4nO3de5wcZZ3v8c8vITAMdyfZFZLMTNQcAiRckgEDiYACK3ckBw9kAwbO0VmCHlx3DyyYFXfRuJzVZdEF1OhighkiisgC4mVREKICDiHcAgkJZJKRWwgkEMasJP72j6oJnaaru6q7+lbzfb9e/Zrpquqqp27feuqp6mpzd0REpPkNq3cBREQkHQp0EZGMUKCLiGSEAl1EJCMU6CIiGaFAFxHJCAV6gzGzBWb2xfD/D5jZijLH8w0z+1y6pWsOZna+mS2pwniPNbP+tMcbY7p/YWa3JfxMu5ltNrPhRYZxM3tfxQUsg5mtMbPjI/qVvd3njGMXM3vazP6skvE0GwV6GcKN8Q/hDvOSmX3HzHZPezrufr+77x+jPO8IMHe/0N2/kGZ5zGxmOO+W130nM3vZzE5NOD43szfD5fh7M7u6WABVysxazGyjmX2oQL9/NbNbqjXtCn0JuCrJB9x9rbvv7u7bAMzsXjP7eFVKl8fM/sHMFpX7+bjbfYlx/BdwA/B3lYyn2SjQy3eau+8OTAYOB/4+fwAz26nmpaquHwF7A8fkdT8RcOCnZYzzkHA5HgOcDfzvSgpYjLtvAW4GPpbbPTyIzAQWVmva5TKzw4G93P2BepelCd0EzDazXepdkFpRoFfI3X8P/ASYCNtrnZ80s2eAZ8Jup5rZsrB2+BszO3jw82Z2mJktNbM3zOxmoCWn3w6n+GY21sxuNbP1ZrbBzK41swOAbwBHhjXdjeGw25tuwvefMLNVZvaqmd1uZvvl9HMzu9DMnjGz18zsuvxaeDivW4DvkxeI4fsed99qZiPN7M5wXl81s/vNrOR25u6rgF8Dh+aUq9hyu8zMVofLbbmZnVlqGqGFwP80s9acbh8m2Bd+YmYXmNlT4XifNbO/ihpRfpNFgWVerPx/F56VvGFmK8zsuIjJnAT8Kudz/2hm/xb+PyI8w/nn8P2uZrbFzPYxs86wfDuZ2TzgA8C14TZybc74jy+03s1smJn9vZn1hWdfN5rZXmG/dzQ9WdiEYmYnAp8Fzg6n9WjU8gMOD9fdaxac5bYUGn+xdW1m7zOzX5nZJjN7JdyHAHD3fuA1YGqRMmSLu+uV8AWsAY4P/x8LPAl8IXzvwH8C7wJ2JajBvwy8HxgOzA4/vwuwM9AHfAYYAZwFvAV8MRzXsUB/+P9w4FHgX4HdCIJ/etjvfGBJXhkX5IznQ8ArYVl2Af4NuC9nWAfuJKh9twPrgRMj5n0a8Dqwa/h+L+APwKHh+38iOMCMCF8fACxiXA68L/x/AvAC8JnwfeRyC/t/FNiPIIjPBt4E9o1aHnnTXQmcm/N+MXBN+P8pwHsBIzhrGAAm56+P/PIXWObF1vv+wDpgv3DYTuC9EWX9AXBJzvsPAY+H/x8FrAYezOn3aM44HdgpfH8v8PECy7/geic4U1oFvAfYHbgV+G6h5VBgn/gHYFGMfegJgv3nXQQH83ds9zHW9WJgbthv+z6R89nbgYvrnRm1eqmGXr7bwtrwEoIa1Jdy+v2Tu7/q7n8APgF8090fdPdt7r4Q+C+CWsNUgtC7xt3fcvdbgN9FTO8Igo36End/0923uHvcC3+zgBvcfakHbYuXE9ToO3OGucrdN7r7WuAecmrKudz918BLwGAt6X8BK919Wfj+LWBfoCOcp/s93LMiLDWzN4GnCELn+rB7seWGu//A3Z939z+5+80EZ0NHxFweNxKeZZjZnsAZhM0t7v5jd1/tgV8BPyc4KCVVrPzbCIL9QDMb4e5r3H11xHj2Bt7Ief9bYLyZtQFHA/8OjLbgGs4x5NTmY4pa77OAq939WXffTLDNnGPpNiNe6+7r3P1VYB5Bs9c7lFjXbwEdBAfHQvvEGwTLcEhQoJfvI+6+t7t3uPtFYXgPWpfzfwfwt+Fp98bwIDCWIJz3A36fF3h9EdMbC/S5+9Yyyrpf7njDHXQDMDpnmBdz/h8gqJVF2R6IwHns2Pb8ZYKa3c/DJovLSpRtcjitswlqs7uF3YstN8zsYznNGRsJmrxGlphWbvk/aGajCc6KVrn7I+F4TzKzB8Lmoo3AyQnGmyuy/B40L/01QU32ZTP7nuU0geV5Ddhj8E24nfUShPfRBAH+G4Izp3ICPWq977DNhP/vBPx5wvEXk7uf9IXTfIcS6/pSgrOph8zsSTPLvwazB7AxxTI3NAV6deQG9DpgXhj+g69Wd19M0MQwerDdMtQeMc51QHtEDanUIzOfJwgYAMxsN6AN+H2pGYlwI3CcmR1JUOO8aXtB3N9w97919/cApwF/U6R9ePAz7u7fJ6h9XhF2jlxuZtYBfAv4FNDm7nsTnL6/o90/YnprgfsJaqHnhfODBRfPfgh8BfjzcLx3FRnvAJDbFv/unP+LrXfc/SZ3n06wXhz4/xHTeAz4H3ndfkXQvHIYwRndrwiuAxwB3Bc12xHdo+ywzRBsl1sJzs7eJGe+LbioPKqMaY3NG//z+QOUWtfu/qK7f8Ld9wP+CrjedrwV8wCCpsohQYFefd8CLjSz91tgNzM7xcz2IAiwrcDF4cWrGUQ3GzxEcAC4KhxHi5lNC/u9BIwxs50jPnsTcIGZHRqG1pcI2l3XlDND7t5H0NS0GPhPd99ey7PgQuD7woPU6wTNC9tijvoqoNvM3k3x5bYbQWisD6d5AeFF6QQWEoTENKAn7LYzQVPIemCrmZ0E/EWRcSwD/tLMhocXA3Pv/oksv5ntb2YfCtfFFoJrEFHL6C7eeVfRrwjOkJa7+x8J28eB59x9fcR4XiJoD49rMfAZMxsXNud8Cbg5PENcCbSE8zOC4A6v3DtJXgI6rfTF8E+a2RgzexfBhdSbCwxTdF2b2UfNbEz49rVw2MFbNUcTtM8PmTuEFOhV5u69BO2p1xJscKsILtoR7owzwvevETQ73Boxnm0ENd73AWuB/nB4gF8SXJh90cxeKfDZXwCfI6h9vkBw0e+cCmdtIUEN7sa87uOBu4HNBAes69393jgjdPfHCcLqkhLLbTnwL+H4XwImEVxUS+IWYB/gF+7+QjjeN4CLCe7keQ34S4KLalE+TbBONhLU9m/LmZfI8hOE31UEF6pfBP6MINDewd2XApvM7P05nX9DcMF9sDa+nODAEFU7B/gqcFZ4R8nXigw36Abgu+E4nwvH/3/DMm0CLgK+TXCW9ybB9jjoB+HfDWa2tMg0biK4RvFs+Ppi/gAx1vXhwINmtplgXX3a3Z8L+/0lsDC8bjQkWPHrVSJSb2b2F8BF7v6RepelWYRnP48CR7v7y/UuT60o0EVEMkJNLiIiGaFAFxHJCAW6iEhGKNBFRDJCgS4ikhEKdGlo9vaz59+wt59aeGGML63kj6PgjymkKe50wi+RPWVmK6tdJhlaFOjSDE5z9z0Ivsh0FcGPFvx7fYtUkTkEXyZ6b/gYBpFUKNClabj7Jne/neAbsrPNLPcr4AWfmW1m3yV4TsgdFjyf+9Jiw4f9Cj6r3Mz2M7MfWvA8+ufM7OKczxScTj4z2xv4PMFjB7aR/JEFIpEU6NJ03P0hgq+a5z7WdnX4fi/gH4FFZravu59H8KiE0zz4SbZ/Lja8me1PELaHh2cFHwbWhE08dxB8+3A0cBzw12b24bBMUdPJ9zlgdfiQrpXAwRHDiSSmQJdm9TzBg5eA5M9HLzJ81LPKDwdGufuV7v5Hd3+W4AFcsZ+JY2bvIThYDP7O5ZOEgW5mR5rZby349Z3F4UOvRBJRoEuzGg28OvjGEj4fPWr4Is8q7wD2sx2fb/5Zkj0f/MvA3TkPK3sSOCT8vw/4kLsfQ/CgqjMSjFcECB5YL9JULPjh5NEEj/DNfWb2ccBv3X2bmS3j7eeYe97niw7v7jcBN1nwa0bfJHhW+fUEj6cdX6RokQ9GMrPpBE/WfN3MBh83vCvwp3Cauc8C3zrYXSQJ1dClaZjZnmZ2KvA9gt+sfDzsVer56PnPAo8cvsizyh8iCOO/s+DHmIeb2cTw4BI1ncFyG3A1wW+t7k/wM2+HEjxrfW8za88ZdhzBD0PfmWzpiCjQpTncYWZvEPwK0FyCcLxgsGeMZ2b/E/D3YVPJ/ysxfMFnlec8j/5QgueDv0LwPPC9oqaT030WQdPMJeEv7LwY/ijIQwS/eTnYjr4nwXPmzwuflS+SiB6fK9IALPhpwf8A/sXdf1nv8khzUg1dpDHMJPiR7CvM7F4zO7vUB0TyqYYuIpIRqqGLiGSEAl1EJCMU6CIiGVG3LxaNHDnSOzs76zV5EZGm9PDDD7/i7qMK9atboHd2dtLb21uvyYuINCUz64vqpyYXEZGMUKCLiGSEAl1EJCMU6CIiGaFAFxHJCAW6SDX19EBnJwwbFvzt6al3iSTDFOgi1dLTA93d0NcH7sHf7m6F+lBQpwO5Ar0cqnU1r1quu7lzYWBgx24DA0F3ya46HsgV6Emp1tW8ar3u1q5N1l3ia+RKVR0P5Ar0pFTral61Xnft7cm6Q2MHVaNo9EpVHQ/kCvS4Bne0vohv3arW1fhqvaPNmwetrTt2a20NuhfS6EHVKBq9UlXOgTwlCvQ4cne0KPkrq9Y1LdXsSqv1jjZrFsyfDx0dYBb8nT8/6F5IowdVo2j0pqykB/I0uXtdXlOmTPGm0dHhHtSZCr9aW90XLXp7+EWLgm7FhklT3OktWhTMi1nwt1rlSUM1ylrpeqn28jMrvH2ZpTudZhe1P3Z01Ltkb6vitgL0ekSuKtDjiNrRBjei/JVV7gZX7kYQZ3q1PshUotyyxll+5S7jWiy/ZgiqRtBM23IVZCfQy9kZ0zhSJt3RyqlpVbKRxpleM4VFOWWt9k5ei+WXxTOtpOLOW5aXQQnZCPRydti0dvKk4yln568kMOJ8tplO58spa7UDt1bLr1RQZbl22uzzVqODTDYCvdQOW2hhprmTJ1lZ5WyYlQRGoekNjq8ay6LayilrtQO3UZZfo5SjGqLmbfjw8kKykoBN+tkaHoyyEejFdtiohVlo+FrVSpNuEJXuqLmhnb+sWlvd58xpntpPOTtHtYOuUWqP1Txw1bsZo9i1qqTLvJL11YjbX45sBHqxBVbsyF7L2kylNYI0AqPYcqr3DptEI9aQGmH5VSs46nnAKnYGWe68VrsJM18NmzSzEejFmhVKHdFrsZGmsUOkERjN1FaetkYI3Gqr1q2X9WrKKTQ/pV5xtuVK9oNGvIaTIxuB7l68WSGtWmk1bx2shUYpRzFDIXirqRq3XtarIlCsZh51hp27bycdb7Vq6GpDr+A+9DinZ3HugMnfKap962AtNEpbb5RGL1+WldNsWe2KQNJrY3G3m7Tb0PNvMoj6nO5yKUOx2nkld6G0tZW/USfZIaq94ut1v34czXAGkVWlzmoLXUwfrOhUa9uIe/dasZp6lKhyx5mfUjcZ1LECkr1ArzQUklyAiVvLjlsjaMQaai3LlPRbt5KeONt9fk202ttG3PGndQacdH4asAJSUaADY4F7gKeAJ4FPFxjGgK8Bq4DHgMmlxltRoJdaKaWOwHHa38tZeXGO/A24gdS0TKVCpd4Ht3qo1dlR3AuQueu9FttGLfebUrX9ah1IUlRpoO87GNDAHsBK4MC8YU4GfhIG+1TgwVLjrfhZLsVOp0odgaNWaltb9WuqlW4g1dj509xoS5UvTqg0e/NLknVU6zO23LIVq6UPapRAS2s5larMxc2KcrfRFPbfVJtcgP8ATsjr9k1gZs77FcC+xcZTtYdzxVkBxTaOatWW4txrW6+dP62NNu5ybWuLvl6RNCwa7Y6ZZjqljzPtRjqjTGNdx2l2ipsV5ZQ/hXGlFuhAJ7AW2DOv+53A9Jz3vwC6io2raoEet0ZRyyBIcq9tPXb+JO3/xZZZ0jOfSi5CJyl3LSVdR/WsAcdZfo24jPNVekZUq6xIaf9NJdCB3YGHgRkF+v24QKBPKTBcN9AL9La3t5e3UEpppBpFqTIVqyEU2ojq+bXvODt20msThYK+0O1hUWVrxHWddB3Vex6S3PHRKGdBuco54FRy50y5ZSw2vYT7b8WBDowAfgb8TUT/xmlyqWQFV+shPkmDbrDMaddoK5nnOBeTyrl7qNTtYYWeQTNiROkmm3qFUNKArlYNuJFDOE2VHBBrcfZRhWtGlV4UNeBG4Joiw5ySd1H0oVLjreoPXNTqolTcz0ZtdFHfhIvqXs5F20LLopx5jnsPc6FQjnMgSrqMir3iLqdqhF4512fSriU3ajNJLS/o51Y0al2mXFW4q6vSQJ8OeHg74rLwdTJwIXChvx361wGrgcdLtZ97tQM9iUqO8HE/G7WDRT0BsVhoprFjlwrYQtNIUvsu517mcs5ionaQOAeQaoZeWgfRcssa52wqzXmL+7laXtBvlANZFb53kb0vFqWp1FePi228SdpLk9TO0mpXLbcJJO7Bp9ir0EGtnAuqSWroSa41VDP0kqyLNCsOg5LemhdXJaFcywv6aU+jElWYbwX6oCThGee0vd53nZRSzheois1Tkpp6Wt/gi3sgidN8kztMtUIvSi2f/hdnHZWzjVayvVfzG8IpX3RMPN1STWUpn5ko0N2TN3s04ml7UuUcrOKER7VqRXHOYtra3Hfeufgyj7NeqhV6UWpZQ4+zfsoJuUoOSrVoGqlWBauQJPt+yu30CnT3eDXPcm4RbOS7Ccq5QBe3KaLU3SnVXA5pXESME3pxa4/VrqmV89lStdZa1dCLbSdpB28tLwbX8uCRR4Hu3nz3B6cl6QGnVNAluVukkQ927vGbkIqFQrk1tcFvy8Y9KCUdPo2LsZXMa9TwcR85UK5abYt1/EKYAt09ndPWel8xz1etwEyjdtdIyy+N2nrUPJdba03rG5pxzpTS3E6SjCvphe5qVZaqsS2qhl7nQK/ktLURa5i1CMxqtJnW+gynnGAsFur5nytnGcVZNnGGafQ7PIrVxmt5sK/GtljHCosCfVAjB3QxSe7OaZQLefV8RkmupPOQ9OJdOcsozrKp9NbLWi/vpNtoLffFam2LdcoTBXozi6oJ1GIHrqQW0ig19KQ7c9xabyUXhdOqoce5LbUWyzvpHWS1rkiluS02QKVQgd7M6t0OWe4G3Cht6JXemVGspp5/gMgN+2LSakOv5q2AabSVQ7yLudWW1rbYINu0Ar2ZNUo7ZDkaoDZTlbOMNA6m1br1MsmBpVjZ0rru0CjbZRrbYoOcdSrQm1mjtEM2s7TPMqKCq9bXBwbLmPY2kNYF2TqGXlU0yHUhBXoza5DTvCGrXhek6ymtC7L1PtilrUHWe7FAH4Y0tlmzYP586OgAs+Dv/PlBd6m+WbNgzRr405+Cv7Nmwbx50Nq643CtrUH3LGhvL9197dp0xtlIenqgsxOGDQv+9vTs2L8Z1ntU0lf7pRq6NLUsN3dVckG2Fj+0Xg1Jrxs06F0uFvSvva6uLu/t7a3LtEWkhJ4emDs3qIm3twe10Nyzwp4e6O6GgYG3u7W2BmePUPyzjaizE/r63tm9oyM4M2sgZvawu3cV7KdAF5GylAr9ZjJsWFAvz2cWNLc1kGKBvlOtCyMiGTFrVvMGeL729sI19GZo+8+hi6IiIs1wwTMGBbqISEbuJlOTi4gIZKIJSTV0EZGMUKCLiGSEAl1EJCMU6CIiGaFAFxHJCAW6iEhGKNBFRDJCgS4ikhEKdBGRjFCgi4hkhAJdRCQjFOgiIhmhQBcRyQgFuohIRijQRUQyomSgm9kNZvaymT0R0f9YM9tkZsvC1xXpF1NEREqJ8wMXC4BrgRuLDHO/u5+aSolERKQsJWvo7n4f8GoNyiIiIhVIqw39SDN71Mx+YmYHpTROERFJII3fFF0KdLj7ZjM7GbgNGF9oQDPrBroB2tvbU5i0iIgMqriG7u6vu/vm8P+7gBFmNjJi2Pnu3uXuXaNGjap00iIikqPiQDezd5uZhf8fEY5zQ6XjFRGRZEo2uZjZYuBYYKSZ9QOfB0YAuPs3gLOAOWa2FfgDcI67e9VKLCIiBZUMdHefWaL/tQS3NYqISB3pm6IiIhmhQBcRyQgFuohIRijQRUQyQoEuIpIRCnQRkYxQoIuIZIQCXUQkIxToIiIZoUAXEckIBbqISEYo0EVEMkKBLiKSEQp0EZGMSOMn6ERkiHvrrbfo7+9ny5Yt9S5KZrS0tDBmzBhGjBgR+zMKdBGpWH9/P3vssQednZ2EP2AmFXB3NmzYQH9/P+PGjYv9OTW5iEjFtmzZQltbm8I8JWZGW1tb4jMeBbqIpEJhnq5ylqcCXUSGjJNPPpmNGzcWHeaKK67g7rvvLmv89957L6eeempZn02D2tBFJPPcHXfnrrvuKjnslVdeWYMSVYdq6CJSez090NkJw4YFf3t6Kh7l1VdfzcSJE5k4cSLXXHMNa9as4YADDuCiiy5i8uTJrFu3js7OTl555RUAvvCFLzBhwgROOOEEZs6cyVe+8hUAzj//fG655RYAOjs7+fznP8/kyZOZNGkSTz/9NAAPPfQQRx11FIcddhhHHXUUK1asqLj8aVCgi0ht9fRAdzf09YF78Le7u6JQf/jhh/nOd77Dgw8+yAMPPMC3vvUtXnvtNVasWMHHPvYxHnnkETo6OrYP39vbyw9/+EMeeeQRbr31Vnp7eyPHPXLkSJYuXcqcOXO2h/6ECRO47777eOSRR7jyyiv57Gc/W3bZ06QmFxGprblzYWBgx24DA0H3WbPKGuWSJUs488wz2W233QCYMWMG999/Px0dHUydOrXg8GeccQa77rorAKeddlrkuGfMmAHAlClTuPXWWwHYtGkTs2fP5plnnsHMeOutt8oqd9pUQxeR2lq7Nln3GNy9YPfBgI87fCG77LILAMOHD2fr1q0AfO5zn+ODH/wgTzzxBHfccUfDfKFKgS4itdXenqx7DEcffTS33XYbAwMDvPnmm/zoRz/iAx/4QOTw06dP3x7Emzdv5sc//nGi6W3atInRo0cDsGDBgrLLnTYFuojU1rx50Nq6Y7fW1qB7mSZPnsz555/PEUccwfvf/34+/vGPs88++0QOf/jhh3P66adzyCGHMGPGDLq6uthrr71iT+/SSy/l8ssvZ9q0aWzbtq3scqfNkpx6pKmrq8uLXYgQkebx1FNPccABB8T/QE9P0Ga+dm1QM583r+z283Jt3ryZ3XffnYGBAY4++mjmz5/P5MmTa1qGUgotVzN72N27Cg2vi6IiUnuzZtU8wPN1d3ezfPlytmzZwuzZsxsuzMuhQBeRIemmm26qdxFSpzZ0EZGMUKCLiGSEAl1EJCMU6CIiGaFAFxHJk/sY3Ntvv52rrroqctiNGzdy/fXXb3///PPPc9ZZZ1W9jIUo0EVkyCjnS0Cnn346l112WWT//EDfb7/9tj+tsdZKBrqZ3WBmL5vZExH9zcy+ZmarzOwxM2v+mzlFpKp6enro7Oxk2LBhdHZ20pPC43PXrFnDhAkTmD17NgcffDBnnXUWAwMDdHZ2cuWVVzJ9+nR+8IMf8POf/5wjjzySyZMn89GPfpTNmzcD8NOf/pQJEyYwffr07Q/hguCr/Z/61KcAeOmllzjzzDM55JBDOOSQQ/jNb37DZZddxurVqzn00EO55JJLWLNmDRMnTgSCn+a74IILmDRpEocddhj33HPP9nHOmDGDE088kfHjx3PppZdWPP8Qr4a+ADixSP+TgPHhqxv4euXFEpGs6unpobu7m76+Ptydvr4+uru7Uwn1FStW0N3dzWOPPcaee+65vebc0tLCkiVLOP744/niF7/I3XffzdKlS+nq6uLqq69my5YtfOITn+COO+7g/vvv58UXXyw4/osvvphjjjmGRx99lKVLl3LQQQdx1VVX8d73vpdly5bx5S9/eYfhr7vuOgAef/xxFi9ezOzZs7c/yGvZsmXcfPPNPP7449x8882sW7eu4vkvGejufh/wapFBzgBu9MADwN5mtm/FJRORTJo7dy4DeY/PHRgYYO7cuRWPe+zYsUybNg2Ac889lyVLlgBw9tlnA/DAAw+wfPlypk2bxqGHHsrChQvp6+vj6aefZty4cYwfPx4z49xzzy04/l/+8pfMmTMHCJ6+WOr5L0uWLOG8884Dgmeod3R0sHLlSgCOO+449tprL1paWjjwwAPp6+ureP7T+KboaCD30NIfdnshhXGLSMasjXhMblT3JPJ/WHnw/eBjdN2dE044gcWLF+8w3LJly6ryI9fFnpU1+Fhe2PHRvJVI46JooaVQcC7MrNvMes2sd/369SlMWkSaTXvEY3Kjuiexdu1afvvb3wKwePFipk+fvkP/qVOn8utf/5pVq1YBwZnBypUrmTBhAs899xyrV6/e/tlCjjvuOL7+9aBVedu2bbz++uvssccevPHGGwWHP/roo7c3Ja1cuZK1a9ey//77VzyfUdII9H5gbM77McDzhQZ09/nu3uXuXaNGjUph0iLSbObNm0dr3uNzW1tbmVfB43MHHXDAASxcuJCDDz6YV199dXvzyKBRo0axYMECZs6cycEHH8zUqVN5+umnaWlpYf78+ZxyyilMnz59h5+ry/XVr36Ve+65h0mTJjFlyhSefPJJ2tramDZtGhMnTuSSSy7ZYfiLLrqIbdu2MWnSJM4++2wWLFiwQ808dYO/hl3sBXQCT0T0OwX4CUFNfSrwUJxxTpkyxUUkG5YvX55o+EWLFnlHR4ebmXd0dPiiRYsqLsNzzz3nBx10UMXjaSSFlivQ6xG5WrIN3cwWA8cCI82sH/g8MCI8GHwDuAs4GVgFDAAXpHrEEZHMmTVrFrPq/PjcLCoZ6O4+s0R/Bz6ZWolERMrQ2dnJE08U/LrMkKFvioqIZIQCXURS4XX6OcusKmd5KtBFpGItLS1s2LBBoZ4Sd2fDhg20tLQk+px+gk5EKjZmzBj6+/vR90vS09LSwpgxYxJ9RoEuIhUbMWIE48aNq3cxhjw1uYiIZIQCXUQkIxToIiIZoUAXEckIBbqISEYo0EVEMkKBLiKSEQp0EZGMUKCLiGSEAl1EJCMU6CIiGaFAFxHJCAW6iEhGKNBFRDJCgS4ikhEKdBGRjFCgi4hkhAJdRCQjFOgiIhmhQBcRyQgFuohIRijQRUQyQoEuIpIRCnQRkYxQoIuIZIQCXUQkIxToIiIZoUAXEckIBbqISEYo0EVEMkKBLiKSEbEC3cxONLMVZrbKzC4r0P9YM9tkZsvC1xXpF1VERIrZqdQAZjYcuA44AegHfmdmt7v78rxB73f3U6tQRhERiSFODf0IYJW7P+vufwS+B5xR3WKJiEhScQJ9NLAu531/2C3fkWb2qJn9xMwOSqV0IiISW8kmF8AKdPO890uBDnffbGYnA7cB498xIrNuoBugvb09WUlFRKSoODX0fmBszvsxwPO5A7j76+6+Ofz/LmCEmY3MH5G7z3f3LnfvGjVqVAXFFhGRfHEC/XfAeDMbZ2Y7A+cAt+cOYGbvNjML/z8iHO+GtAsrIiLRSja5uPtWM/sU8DNgOHCDuz9pZheG/b8BnAXMMbOtwB+Ac9w9v1lGRESqyOqVu11dXd7b21uXaYuINCsze9jduwr10zdFRUQyQoEuIpIRCnQRkYxQoIuIZIQCXUQkIxToIiIZoUAXEckIBbqISEYo0EVEMkKBLiKSEQp0EZGMUKCLiGSEAl1EJCMU6CIiGaFAFxHJCAW6iEhGKNBFRDJCgS4ikhEKdBGRjFCgi4hkhAJdRCQjFOgiIhmhQBcRyQgFuohIRijQRUQyQoEuIpIRCnQRkYxQoIuIZIQCXUQkIxToIiIZoUAXEckIBbqISEYo0EVEMkKBLiKSEQp0EZGMiBXoZnaima0ws1VmdlmB/mZmXwv7P2Zmk9MvqoiIFFMy0M1sOHAdcBJwIDDTzA7MG+wkYHz46ga+nnI5RUSkFHcv+gKOBH6W8/5y4PK8Yb4JzMx5vwLYt9h4p0yZ4kktWrTIOzo63My8ra3N29ra3My8o6PD58yZU7BfI/yv8g2dsjZ6+ZqprI1evkrL2tHR4YsWLUqcg0BvZF7HCPSzgG/nvD8PuDZvmDuB6TnvfwF0pRnoixYt8tbWVgf00ksvvTLxam1tTRzqFAn0OG3oVqCblzEMZtZtZr1m1rt+/foYk37b3LlzGRgYSPQZEZFGNjAwwNy5c1MbX5xA7wfG5rwfAzxfxjC4+3x373L3rlGjRiUq6Nq1axMNLyLSDNLMtjiB/jtgvJmNM7OdgXOA2/OGuR34WHi3y1Rgk7u/kFopgfb29jRHJyLSENLMtpKB7u5bgU8BPwOeAr7v7k+a2YVmdmE42F3As8Aq4FvARamVMDRv3jxaW1vTHq2ISN20trYyb9689EZY6qJotV66y0Xly2JZG718zVTWRi9fpWWtxl0uFvSvva6uLu/t7a3LtEVEmpWZPezuXYX66av/IiIZoUAXEckIBbqISEYo0EVEMkKBLiKSEXW7y8XM1gN9ZX58JPBKisVpFkNxvofiPMPQnO+hOM+QfL473L3gV+3rFuiVMLPeqNt2smwozvdQnGcYmvM9FOcZ0p1vNbmIiGSEAl1EJCOaNdDn17sAdTIU53sozjMMzfkeivMMKc53U7ahi4jIOzVrDV1ERPI0XaCb2YlmtsLMVpnZZfUuTzWY2Vgzu8fMnjKzJ83s02H3d5nZf5rZM+Hffepd1rSZ2XAze8TM7gzfD4V53tvMbjGzp8N1fuQQme/PhNv3E2a22MxasjbfZnaDmb1sZk/kdIucRzO7PMy2FWb24aTTa6pAN7PhwHXAScCBwEwzO7C+paqKrcDfuvsBwFTgk+F8Xgb8wt3HE/xuaxYPaJ8meO7+oKEwz18FfuruE4BDCOY/0/NtZqOBiwl+e3giMJzgx3OyNt8LgBPzuhWcx3AfPwc4KPzM9WHmxdZUgQ4cAaxy92fd/Y/A94Az6lym1Ln7C+6+NPz/DYIdfDTBvC4MB1sIfKQuBawSMxsDnAJ8O6dz1ud5T+Bo4N8B3P2P7r6RjM93aCdgVzPbCWgl+NnKTM23u98HvJrXOWoezwC+5+7/5e7PEfxg0BFJptdsgT4aWJfzvj/slllm1gkcBjwI/LmHP+0X/v2zOhatGq4BLgX+lNMt6/P8HmA98J2wqenbZrYbGZ9vd/898BVgLfACwc9W/pyMz3coah4rzrdmC3Qr0C2zt+mY2e7AD4G/dvfX612eajKzU4GX3f3hepelxnYCJgNfd/fDgDdp/maGksJ24zOAccB+wG5mdm59S1V3FedbswV6PzA25/0YgtO0zDGzEQRh3uPut4adXzKzfcP++wIv16t8VTANON3M1hA0pX3IzBaR7XmGYJvud/cHw/e3EAR81uf7eOA5d1/v7m8BtwJHkf35huh5rDjfmi3QfweMN7NxZrYzwQWE2+tcptSZmRG0qT7l7lfn9LodmB3+Pxv4j1qXrVrc/XJ3H+PunQTr9Zfufi4ZnmcAd38RWGdm+4edjgOWk/H5JmhqmWpmreH2fhzBtaKszzdEz+PtwDlmtouZjQPGAw8lGnPUj4026gs4GVgJrAbm1rs8VZrH6QSnWo8By8LXyUAbwVXxZ8K/76p3Was0/8cCd4b/Z36egUOB3nB93wbsM0Tm+x+Bp4EngO8Cu2RtvoHFBNcI3iKogf+fYvMIzA2zbQVwUtLp6ZuiIiIZ0WxNLiIiEkGBLiKSEQp0EZGMUKCLiGSEAl1EJCMU6CIiGaFAFxHJCAW6iEhG/DfUSiHbcMpGDwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Prediction Vs Real Values (without bias) \\n Dataset $A_2$')\n",
    "plt.scatter(list(range(100)),Y_two,color='red', label=\"original\")\n",
    "plt.scatter(list(range(100)), predictions_withoutbias_two,color='black', label=\"prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "id": "b3bf2c2b-a5a6-45a6-88bf-ed568d8195cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Prediction Vs Real Values (without bias) \\n Dataset $A_3$')\n",
    "plt.scatter(list(range(100)),Y_three,color='red', label=\"original\")\n",
    "plt.scatter(list(range(100)), predictions_withoutbias_three,color='black', label=\"prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ad30384-6eef-4cdf-b892-28c1a49ba059",
   "metadata": {},
   "source": [
    "#### COMMENTS: While bias is 0 , when standard deviation is getting higher, prediction is being close to real values!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff416ac8-1f44-4af5-9507-c232608a0f51",
   "metadata": {},
   "source": [
    "### 2.7 PLOTTING WHILE $\\beta_1=0$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "id": "c216a9e3-bd6a-4fd9-bb3b-185780a53c84",
   "metadata": {},
   "outputs": [],
   "source": [
    "#prediction points without coefficient  on A_one dataset\n",
    "predictions_withoutcoef_one =np.matmul(X_one,(0,beta_by_lineerreg_one[1]))\n",
    "\n",
    "#prediction points without coefficient on A_two dataset\n",
    "predictions_withoutcoef_two =np.matmul(X_two,(0,beta_by_lineerreg_two[1]))\n",
    "\n",
    "#prediction points without coefficient on A_three dataset\n",
    "predictions_withoutcoef_three =np.matmul(X_three,(0,beta_by_lineerreg_three[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 404,
   "id": "cdeef16e-1d3e-46b5-86d4-886e4d1c7d15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Prediction Vs Real Values (without coefficient) \\n Dataset $A_1$')\n",
    "plt.scatter(list(range(100)),Y_one,color='green', label=\"original\")\n",
    "plt.scatter(list(range(100)), predictions_withoutcoef_one,color='pink', label=\"prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 405,
   "id": "32a9f781-71d9-47e9-b462-3c8a1e241522",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Prediction Vs Real Values (without coefficient) \\n Dataset $A_2$')\n",
    "plt.scatter(list(range(100)),Y_two,color='green', label=\"original\")\n",
    "plt.scatter(list(range(100)), predictions_withoutcoef_two,color='pink', label=\"prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 406,
   "id": "deaa36e6-0cb4-4f5a-a86d-c4ff9813a6f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Prediction Vs Real Values (without coefficient) \\n Dataset $A_2$')\n",
    "plt.scatter(list(range(100)),Y_three,color='green', label=\"original\")\n",
    "plt.scatter(list(range(100)), predictions_withoutcoef_three,color='pink', label=\"prediction\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2805a487-ac45-4b1a-bea4-f84a60c54db5",
   "metadata": {},
   "source": [
    "#### COMMENTS: Same like previous comments, while $\\beta_one =0$, when standard deviation is being bigger(then points would have more space between them), then the prediction is being more close to the real values."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "116ac79f-5a97-4e81-8648-2643fc0a334c",
   "metadata": {},
   "source": [
    "### 2.8 USING NUMPY.LINALG"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1ab325d-64f0-4487-ab78-d7d68edd36a7",
   "metadata": {},
   "source": [
    "#### 2.8.1 Finding the Beta For Each Dataset by using numpy.linalg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 407,
   "id": "6af9bcac-dd61-4cae-bd0a-c4ac66b473d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#finding the beta ones for data set A_one\n",
    "beta_by_nplinalg_one=np.linalg.lstsq(X_one,Y_one,rcond=None)\n",
    "\n",
    "#finding the beta two for data set A_two\n",
    "beta_by_nplinalg_two=np.linalg.lstsq(X_two,Y_two,rcond=None)\n",
    "\n",
    "#finding the beta three for data set A_three\n",
    "beta_by_nplinalg_three=np.linalg.lstsq(X_three,Y_three,rcond=None)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b478e3b-53f5-4843-8de4-1d34311f1ff4",
   "metadata": {},
   "source": [
    "#### 2.8.2 Predictions on Each Dataset by using numpy.linalg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 411,
   "id": "aa25532f-04b0-4df2-bad3-af54983c5341",
   "metadata": {},
   "outputs": [],
   "source": [
    "#prediction points by using nump.linalg on A_one dataset\n",
    "prediction_by_nplinalg_one =np.matmul(X_one,beta_by_nplinalg_one[0])\n",
    "\n",
    "#prediction points by using nump.linalg on A_two dataset\n",
    "prediction_by_nplinalg_two =np.matmul(X_two,beta_by_nplinalg_two[0])\n",
    "\n",
    "#prediction points by using nump.linalg on A_three dataset\n",
    "prediction_by_nplinalg_three =np.matmul(X_three,beta_by_nplinalg_three[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9ca91c7-8b4d-49da-86fe-f7a3b21edb7e",
   "metadata": {},
   "source": [
    "#### 2.8.3 Difference Between Beta Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "id": "d1ff124e-d026-4315-accd-f930a65dc32f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My Beta_one on A_one = [0.05860807 1.88318874]\n",
      "np.linalg Beta_one on A_one = [0.05860807 1.88318874]\n"
     ]
    }
   ],
   "source": [
    "#for dataset A_one\n",
    "print(\"My Beta_one on A_one =\",beta_by_lineerreg_one)\n",
    "print(\"np.linalg Beta_one on A_one =\",beta_by_nplinalg_one[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 418,
   "id": "7a18b7cd-29d5-4455-ac6d-32ef414c33bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My Beta_two on A_two = [-0.00573152  2.00996781]\n",
      "np.linalg Beta_two on A_two = [-0.00573152  2.00996781]\n"
     ]
    }
   ],
   "source": [
    "#for dataset A_two\n",
    "print(\"My Beta_two on A_two =\",beta_by_lineerreg_two)\n",
    "print(\"np.linalg Beta_two on A_two =\",beta_by_nplinalg_two[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 419,
   "id": "3f448584-b2bf-4f94-b098-9a69ed14b290",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My Beta_three on A_three = [0.03410287 1.93550164]\n",
      "np.linalg Beta_three on A_three = [0.03410287 1.93550164]\n"
     ]
    }
   ],
   "source": [
    "#for dataset A_three\n",
    "print(\"My Beta_three on A_three =\",beta_by_lineerreg_three)\n",
    "print(\"np.linalg Beta_three on A_three =\",beta_by_nplinalg_three[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fafa3f06-dbd2-45c6-a880-6f61f13758ed",
   "metadata": {},
   "source": [
    "#### CONCLUSION:  The beta values that I calculated by using linear regression algorithm and the beta values that I calculated by usin np.linalg code are the SAMEEE!!!!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b910246-7be3-4d0f-964b-ce690eb5aeaf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
